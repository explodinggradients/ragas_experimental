"""Field Metadata for python's `t.Annotate`."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/typing.ipynb.

# %% auto 0
__all__ = ['ColumnType', 'FieldMeta', 'Number', 'Text', 'Select', 'MultiSelect', 'Checkbox', 'Date', 'Custom']

# %% ../nbs/typing.ipynb 2
import typing as t
from enum import Enum
from pydantic import BaseModel, create_model
from datetime import datetime, date
import inspect

# %% ../nbs/typing.ipynb 4
class ColumnType(str, Enum):
    """Column types supported by the Ragas API."""
    NUMBER = "number"
    TEXT = "text"
    SELECT = "select"
    MULTI_SELECT = "multiSelect"
    CHECKBOX = "checkbox"
    DATE = "date"
    CUSTOM = "custom"


# %% ../nbs/typing.ipynb 5
class FieldMeta:
    """Base metadata for field type annotations."""
    def __init__(self, type, required=True, **settings):
        self.type = type
        self.required = required
        self.settings = settings.copy()

# %% ../nbs/typing.ipynb 6
class Number(FieldMeta):
    """Number field metadata."""
    def __init__(self, min_value: t.Optional[float] = None, max_value: t.Optional[float] = None, required: bool = True):
        settings = {}
        if min_value is not None or max_value is not None:
            settings["range"] = {}
            if min_value is not None:
                settings["range"]["min"] = min_value
            if max_value is not None:
                settings["range"]["max"] = max_value
        super().__init__(ColumnType.NUMBER, required, **settings)


# %% ../nbs/typing.ipynb 7
class Text(FieldMeta):
    """Text field metadata."""
    def __init__(self, max_length: int = 1000, required: bool = True):
        settings = {}
        if max_length is not None:
            settings["max_length"] = max_length
        super().__init__(ColumnType.TEXT, required, **settings)

# %% ../nbs/typing.ipynb 8
class Select(FieldMeta):
    """Select field metadata."""
    def __init__(self, options: t.Optional[t.List[str]] = None, required: bool = True):
        settings = {}
        if options:
            settings["options"] = [{"name": option} for option in options]
        super().__init__(ColumnType.SELECT, required, **settings)

# %% ../nbs/typing.ipynb 9
class MultiSelect(FieldMeta):
    """MultiSelect field metadata."""
    def __init__(self, options: t.Optional[t.List[str]] = None, required: bool = True):
        settings = {}
        if options:
            settings["options"] = [{"name": option} for option in options]
        super().__init__(ColumnType.MULTI_SELECT, required, **settings)


# %% ../nbs/typing.ipynb 10
class Checkbox(FieldMeta):
    """Checkbox field metadata."""
    def __init__(self, required: bool = True):
        super().__init__(ColumnType.CHECKBOX, required)


# %% ../nbs/typing.ipynb 11
class Date(FieldMeta):
    """Date field metadata."""
    def __init__(self, include_time: bool = False, required: bool = True):
        settings = {}
        if include_time:
            settings["include_time"] = include_time
        super().__init__(ColumnType.DATE, required, **settings)


# %% ../nbs/typing.ipynb 12
class Custom(FieldMeta):
    """Custom field metadata."""
    def __init__(self, custom_type: str = "", required: bool = True):
        settings = {}
        if custom_type:
            settings["type"] = custom_type
        super().__init__(ColumnType.CUSTOM, required, **settings)

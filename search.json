[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ragas Experimental",
    "section": "",
    "text": "Install latest from the GitHub repository:\n$ pip install git+https://github.com/explodinggradients/ragas_experimental.git\nor from pypi\n$ pip install ragas_experimental",
    "crumbs": [
      "Ragas Experimental"
    ]
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "Ragas Experimental",
    "section": "",
    "text": "Install latest from the GitHub repository:\n$ pip install git+https://github.com/explodinggradients/ragas_experimental.git\nor from pypi\n$ pip install ragas_experimental",
    "crumbs": [
      "Ragas Experimental"
    ]
  },
  {
    "objectID": "index.html#getting-started",
    "href": "index.html#getting-started",
    "title": "Ragas Experimental",
    "section": "Getting Started",
    "text": "Getting Started\nFirst do signup to beta.app.ragas.io and generate the App Token and put it in the as the env variable RAGAS_APP_TOKEN.\n\nimport os\n# ideally you load this from a .env file so as to not commit it to the repo\nos.environ[\"RAGAS_APP_TOKEN\"] = \"api-key\"\n\nNow lets init a Project in the App\n\nfrom ragas_experimental import Project\n\nproject = Project.create(\"my-project\")\nproject",
    "crumbs": [
      "Ragas Experimental"
    ]
  },
  {
    "objectID": "utils.html",
    "href": "utils.html",
    "title": "Utils",
    "section": "",
    "text": "source\n\ncreate_nano_id\n\n create_nano_id (size=12)\n\n\nsource\n\n\nasync_to_sync\n\n async_to_sync (async_func)\n\nConvert an async function to a sync function\n\nsource\n\n\nplot_experiments_as_subplots\n\n plot_experiments_as_subplots (data, experiment_names=None)\n\n*Plot metrics comparison across experiments.\nParameters: - data: Dictionary with experiment_names as keys and metrics as nested dictionaries - experiment_names: List of experiment IDs in the order they should be plotted\nReturns: - Plotly figure object with horizontal subplots*\n\n# Provided sample data\ndata = {\n    'my-first-experiment': {\n        'correctness': ['pass', 'fail', 'fail', 'fail', 'fail', 'pass', 'fail', \n                  'pass', 'fail', 'fail', 'fail', 'pass', 'pass', 'pass', \n                  'pass', 'fail', 'pass', 'fail', 'pass', 'pass', 'pass', \n                  'fail', 'fail', 'pass', 'pass', 'pass', 'pass', 'fail', \n                  'fail', 'fail'],\n        'positivity': [\n            7, 3, 8, 2, 4, 9, 3, 8, 7, 6, \n            9, 7, 8, 10, 1, 8, 9, 4, 8, 1, \n            9, 3, 2, 1, 1, 9, 8, 4, 3, 8\n        ]\n    },\n    'my-second-experiment': {\n        'correctness': ['pass', 'pass', 'pass', 'fail', 'pass', 'pass', 'pass', \n                  'pass', 'fail', 'pass', 'pass', 'pass', 'fail', 'pass', \n                  'pass', 'pass', 'pass', 'pass', 'pass', 'pass', 'fail', \n                  'pass', 'fail', 'fail', 'pass', 'fail', 'pass', 'fail', \n                  'fail', 'fail'],\n        'positivity': [\n            6, 8, 7, 3, 8, 7, 9, 8, 2, 7, \n            6, 8, 4, 9, 8, 7, 10, 9, 8, 9, \n            3, 8, 4, 2, 7, 3, 8, 4, 2, 3\n        ]\n    }\n}\n\n\n# Plot the comparison\nexperiment_names = ['my-first-experiment', 'my-second-experiment',]\nfig = plot_experiments_as_subplots(data, experiment_names)\n\n# Show the figure\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json",
    "crumbs": [
      "Utils"
    ]
  },
  {
    "objectID": "exceptions.html",
    "href": "exceptions.html",
    "title": "Exceptions",
    "section": "",
    "text": "source\n\nRagasError\nBase class for all Ragas-related exceptions.\n\nsource\n\n\nNotFoundError\nRaised when an item is not found.\n\nsource\n\n\nDuplicateError\nRaised when multiple items are found but only one was expected.\n\nsource\n\n\nValidationError\nRaised when field validation fails.\n\nsource\n\n\nExperimentNotFoundError\nException raised when an experiment doesn’t exist.\n\nsource\n\n\nDatasetNotFoundError\nException raised when a dataset doesn’t exist.\n\nsource\n\n\nProjectNotFoundError\nException raised when a project doesn’t exist.\n\nsource\n\n\nResourceNotFoundError\nException raised when a requested resource doesn’t exist.\n\nsource\n\n\nDuplicateExperimentError\nException raised when multiple experiments exist with the same name.\n\nsource\n\n\nDuplicateDatasetError\nException raised when multiple datasets exist with the same name.\n\nsource\n\n\nDuplicateProjectError\nException raised when multiple projects exist with the same name.\n\nsource\n\n\nDuplicateResourceError\nException raised when multiple resources exist with the same identifier.",
    "crumbs": [
      "Exceptions"
    ]
  },
  {
    "objectID": "project/experiments.html",
    "href": "project/experiments.html",
    "title": "Experiments",
    "section": "",
    "text": "source\n\n\n\n create_experiment_columns (project_id, experiment_id, columns,\n                            create_experiment_column_func)\n\n\nsource\n\n\n\n\n Project.create_experiment (name:str, model:Type[ragas_experimental.model.\n                            pydantic_model.ExtendedPydanticBaseModel])\n\n*Create a new experiment.\nArgs: name: Name of the experiment model: Model class defining the experiment structure\nReturns: Experiment: An experiment object for managing results*\n\nimport os\n\n\nRAGAS_APP_TOKEN = \"api-key\"\nRAGAS_API_BASE_URL = \"https://api.dev.app.ragas.io\"\n\nos.environ[\"RAGAS_APP_TOKEN\"] = RAGAS_APP_TOKEN\nos.environ[\"RAGAS_API_BASE_URL\"] = RAGAS_API_BASE_URL\n\nPROJECT_ID = \"919a4d42-aaf2-45cd-badd-152249788bfa\"\np = Project(project_id=PROJECT_ID)\np\n\nProject(name='yann-lecun-wisdom')\n\n\n\nclass TestModel(BaseModel):\n    name: str\n    description: str\n    price: float\n    url: t.Annotated[str, rt.Url()] = \"https://www.google.com\"\n    tags: t.Annotated[t.Literal[\"test\", \"test2\"], rt.Select(colors=[\"red\", \"blue\"])] = \"test\"\n\n\nexperiment_id = \"5d7752ab-17bf-46bc-a302-afe04ce1a763\"\nexp = p.create_experiment(name=\"test-exp\", model=TestModel)\n#exp = p.create_dataset(name=\"just name and desc 2\", model=TestModel)\n\nexp\n\nExperiment(name=test-exp, model=TestModel)\n\n\n\nsource\n\n\n\n\n Project.get_experiment_by_id (experiment_id:str, model:Type[ragas_experim\n                               ental.model.pydantic_model.ExtendedPydantic\n                               BaseModel])\n\nGet an existing experiment by ID.\n\nexp.experiment_id\n\n'effe0e10-916d-4530-b974-91d5115f5dc2'\n\n\n\np.get_experiment_by_id(exp.experiment_id, TestModel)\n\nExperiment(name=test-exp, model=TestModel)\n\n\n\nsource\n\n\n\n\n Project.get_experiment (experiment_name:str, model)\n\nGet an existing dataset by name.\n\np.get_experiment(\"test-exp\", TestModel)\n\nExperiment(name=test-exp, model=TestModel)",
    "crumbs": [
      "Project",
      "Experiments"
    ]
  },
  {
    "objectID": "project/experiments.html#basics",
    "href": "project/experiments.html#basics",
    "title": "Experiments",
    "section": "",
    "text": "source\n\n\n\n create_experiment_columns (project_id, experiment_id, columns,\n                            create_experiment_column_func)\n\n\nsource\n\n\n\n\n Project.create_experiment (name:str, model:Type[ragas_experimental.model.\n                            pydantic_model.ExtendedPydanticBaseModel])\n\n*Create a new experiment.\nArgs: name: Name of the experiment model: Model class defining the experiment structure\nReturns: Experiment: An experiment object for managing results*\n\nimport os\n\n\nRAGAS_APP_TOKEN = \"api-key\"\nRAGAS_API_BASE_URL = \"https://api.dev.app.ragas.io\"\n\nos.environ[\"RAGAS_APP_TOKEN\"] = RAGAS_APP_TOKEN\nos.environ[\"RAGAS_API_BASE_URL\"] = RAGAS_API_BASE_URL\n\nPROJECT_ID = \"919a4d42-aaf2-45cd-badd-152249788bfa\"\np = Project(project_id=PROJECT_ID)\np\n\nProject(name='yann-lecun-wisdom')\n\n\n\nclass TestModel(BaseModel):\n    name: str\n    description: str\n    price: float\n    url: t.Annotated[str, rt.Url()] = \"https://www.google.com\"\n    tags: t.Annotated[t.Literal[\"test\", \"test2\"], rt.Select(colors=[\"red\", \"blue\"])] = \"test\"\n\n\nexperiment_id = \"5d7752ab-17bf-46bc-a302-afe04ce1a763\"\nexp = p.create_experiment(name=\"test-exp\", model=TestModel)\n#exp = p.create_dataset(name=\"just name and desc 2\", model=TestModel)\n\nexp\n\nExperiment(name=test-exp, model=TestModel)\n\n\n\nsource\n\n\n\n\n Project.get_experiment_by_id (experiment_id:str, model:Type[ragas_experim\n                               ental.model.pydantic_model.ExtendedPydantic\n                               BaseModel])\n\nGet an existing experiment by ID.\n\nexp.experiment_id\n\n'effe0e10-916d-4530-b974-91d5115f5dc2'\n\n\n\np.get_experiment_by_id(exp.experiment_id, TestModel)\n\nExperiment(name=test-exp, model=TestModel)\n\n\n\nsource\n\n\n\n\n Project.get_experiment (experiment_name:str, model)\n\nGet an existing dataset by name.\n\np.get_experiment(\"test-exp\", TestModel)\n\nExperiment(name=test-exp, model=TestModel)",
    "crumbs": [
      "Project",
      "Experiments"
    ]
  },
  {
    "objectID": "project/experiments.html#git-versioning-for-experiments",
    "href": "project/experiments.html#git-versioning-for-experiments",
    "title": "Experiments",
    "section": "Git Versioning for Experiments",
    "text": "Git Versioning for Experiments\n\nsource\n\nfind_git_root\n\n find_git_root (start_path:Union[str,pathlib.Path,NoneType]=None)\n\nFind the root directory of a git repository by traversing up from the start path.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nstart_path\nUnion\nNone\nstarting path to search from\n\n\nReturns\nPath\n\n\n\n\n\n\nfind_git_root()\n\nPath('/Users/jjmachan/workspace/eglabs/ragas_annotator')\n\n\n\ngit.Repo(find_git_root())\n\n&lt;git.repo.base.Repo '/Users/jjmachan/workspace/eglabs/ragas_annotator/.git'&gt;\n\n\n\nsource\n\n\nversion_experiment\n\n version_experiment (experiment_name:str,\n                     commit_message:Optional[str]=None,\n                     repo_path:Union[str,pathlib.Path,NoneType]=None,\n                     create_branch:bool=True, stage_all:bool=False)\n\nVersion control the current state of the codebase for an experiment.\n\nsource\n\n\ncleanup_experiment_branches\n\n cleanup_experiment_branches (prefix:str='ragas/',\n                              repo_path:Union[str,pathlib.Path,NoneType]=N\n                              one, interactive:bool=True,\n                              dry_run:bool=False)\n\nClean up git branches with the specified prefix.\n\ncleanup_experiment_branches(dry_run=True)\n\nNo branches found with prefix 'ragas/'\n\n\n[]",
    "crumbs": [
      "Project",
      "Experiments"
    ]
  },
  {
    "objectID": "project/experiments.html#experiment-wrapper",
    "href": "project/experiments.html#experiment-wrapper",
    "title": "Experiments",
    "section": "Experiment Wrapper",
    "text": "Experiment Wrapper\n\nsource\n\nExperimentProtocol\n\n ExperimentProtocol (*args, **kwargs)\n\n*Base class for protocol classes.\nProtocol classes are defined as::\nclass Proto(Protocol):\n    def meth(self) -&gt; int:\n        ...\nSuch classes are primarily used with static type checkers that recognize structural subtyping (static duck-typing), for example::\nclass C:\n    def meth(self) -&gt; int:\n        return 0\n\ndef func(x: Proto) -&gt; int:\n    return x.meth()\n\nfunc(C())  # Passes static type check\nSee PEP 544 for details. Protocol classes decorated with @typing.runtime_checkable act as simple-minded runtime protocols that check only the presence of given attributes, ignoring their type signatures. Protocol classes can be generic, they are defined as::\nclass GenProto(Protocol[T]):\n    def meth(self) -&gt; T:\n        ...*\n\nsource\n\n\nProject.experiment\n\n Project.experiment (experiment_model, name_prefix:str='',\n                     save_to_git:bool=True, stage_all:bool=True)\n\n*Decorator for creating experiment functions without Langfuse integration.\nArgs: experiment_model: The NotionModel type to use for experiment results name_prefix: Optional prefix for experiment names\nReturns: Decorator function that wraps experiment functions*\n\n# create experimental test dataset\ntest_dataset = p.create_dataset(name=\"test dataset for experiment\", model=TestModel)\ntest_dataset.append(TestModel(name=\"test item 1\", description=\"test item 1 description\", price=100))\ntest_dataset.append(TestModel(name=\"test item 2\", description=\"test item 2 description\", price=200))\ntest_dataset.append(TestModel(name=\"test item 3\", description=\"test item 3 description\", price=300))\n\n\n# create experiment model\nclass TextExperimentModel(TestModel):\n    response: str\n    is_correct: t.Literal[\"yes\", \"no\"]\n\n# create a test experiment function\n@p.experiment(TextExperimentModel, save_to_git=False, stage_all=True)\nasync def test_experiment(item: TestModel):\n    return TextExperimentModel(**item.model_dump(), response=\"test response\", is_correct=\"yes\")\n\n\n# run the experiment\nawait test_experiment.run_async(test_dataset)\n\nRunning experiment: 100%|██████████| 6/6 [00:01&lt;00:00,  3.05it/s]\n\n\nExperiment(name=xenodochial_dorsey, model=TextExperimentModel)\n\n\n\nsource\n\n\nProject.langfuse_experiment\n\n Project.langfuse_experiment (experiment_model, name_prefix:str='',\n                              save_to_git:bool=True, stage_all:bool=True)\n\n*Decorator for creating experiment functions with Langfuse integration.\nArgs: experiment_model: The NotionModel type to use for experiment results name_prefix: Optional prefix for experiment names\nReturns: Decorator function that wraps experiment functions with Langfuse observation*\n\nimport os\n# import langfuse\nfrom langfuse import Langfuse\n\n\nlangfuse = Langfuse(\n  secret_key=os.getenv(\"LANGFUSE_SECRET_KEY\"),\n  public_key=os.getenv(\"LANGFUSE_PUBLIC_KEY\"),\n  host=\"https://us.cloud.langfuse.com\"\n)\n\n\n@p.langfuse_experiment(TextExperimentModel)\nasync def test_experiment(item: TestModel):\n    return TextExperimentModel(**item.model_dump(), response=\"test response\", is_correct=\"yes\")\n\n\nawait test_experiment(test_dataset[0])\n\nTextExperimentModel(name='test item 1', description='test item 1 description', price=100.0, url='https://www.google.com', tags='test', response='test response', is_correct='yes')\n\n\n\nawait test_experiment.run_async(test_dataset)\n\nRunning experiment: 100%|██████████| 6/6 [00:01&lt;00:00,  4.01it/s]\n\n\nExperiment(name=cool_matsumoto, model=TextExperimentModel)",
    "crumbs": [
      "Project",
      "Experiments"
    ]
  },
  {
    "objectID": "project/experiments.html#compare-and-plot",
    "href": "project/experiments.html#compare-and-plot",
    "title": "Experiments",
    "section": "Compare and Plot",
    "text": "Compare and Plot\n\nsource\n\nProject.mlflow_experiment\n\n Project.mlflow_experiment (experiment_model, name_prefix:str='',\n                            save_to_git:bool=True, stage_all:bool=True)\n\n*Decorator for creating experiment functions with mlflow integration.\nArgs: experiment_model: The NotionModel type to use for experiment results name_prefix: Optional prefix for experiment names\nReturns: Decorator function that wraps experiment functions with mlflow observation*\n\nsource\n\n\nProject.compare_and_plot\n\n Project.compare_and_plot (experiment_names:List[str], model:Type[ragas_ex\n                           perimental.model.pydantic_model.ExtendedPydanti\n                           cBaseModel], metric_names:List[str])\n\n*Compare multiple experiments and generate a plot.\nArgs: experiment_names: List of experiment IDs to compare model: Model class defining the experiment structure*\n\nfrom ragas_experimental import BaseModel\n\nclass TestDataset(BaseModel):\n    question: str\n    citations: list[str]\n    grading_notes: str\n    \n\nclass ExperimentModel(TestDataset):\n    response: str\n    score: str\n    score_reason: str\n\n\np.compare_and_plot(\n    experiment_names=[\"xenodochial_hoare\",\"confident_liskov\"],\n    model=ExperimentModel,\n    metric_names=[\"score\"]\n)\n\nFetching experiments: 100%|██████████| 2/2 [00:05&lt;00:00,  2.60s/it]\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json",
    "crumbs": [
      "Project",
      "Experiments"
    ]
  },
  {
    "objectID": "embedding/base.html",
    "href": "embedding/base.html",
    "title": "ragas_experimental",
    "section": "",
    "text": "source\n\n\n\n ragas_embedding (provider:str, model:str, client:Any)\n\n*Factory function to create an embedding instance based on the provider.\nArgs: provider (str): The name of the embedding provider (e.g., “openai”). model (str): The model name to use for embeddings. **kwargs: Additional arguments for the provider’s client.\nReturns: BaseEmbedding: An instance of the specified embedding provider.*\n\nsource\n\n\n\n\n OpenAIEmbeddings (client:Any, model:str)\n\nHelper class that provides a standard way to create an ABC using inheritance.\n\nsource\n\n\n\n\n BaseEmbedding ()\n\nHelper class that provides a standard way to create an ABC using inheritance.\n\n\n\n\n## change to this design\nfrom openai import OpenAI\nembedding_model = ragas_embedding(provider=\"openai\", model=\"text-embedding-3-small\", client=OpenAI())\nembedding_model.embed_text(\"Hello, world!\")\n\n[-0.019184619188308716,\n -0.025279032066464424,\n -0.0017195191467180848,\n 0.01884828321635723,\n -0.033795066177845,\n -0.01969585195183754,\n -0.02094702236354351,\n 0.051580529659986496,\n -0.03212684020400047,\n -0.030377890914678574,\n -0.002145825419574976,\n -0.028978731483221054,\n -0.0024737531784921885,\n -0.031481072306632996,\n 0.010332250036299229,\n 0.018606122583150864,\n -0.04614533483982086,\n 0.04146353527903557,\n 0.0004418617463670671,\n 0.04122137278318405,\n 0.05367926508188248,\n 0.0018733929609879851,\n 0.0045674461871385574,\n 0.010022819973528385,\n 0.04786737635731697,\n 0.0022013208363205194,\n -0.009834472090005875,\n 0.03847686946392059,\n 0.00089213193859905,\n -0.05211866647005081,\n 0.051150016486644745,\n -0.032557349652051926,\n -0.014031948521733284,\n -0.012632790021598339,\n 0.013271828182041645,\n 0.018565760925412178,\n 0.0016068464610725641,\n -0.0008185583865270019,\n -0.012753871269524097,\n -0.029705218970775604,\n -0.004443001933395863,\n -0.015323479659855366,\n 0.025655729696154594,\n 0.009107985533773899,\n -0.03686245530843735,\n 0.020328164100646973,\n -0.04071014001965523,\n -0.002621741034090519,\n 0.03549019992351532,\n 0.04851314052939415,\n -0.03368743881583214,\n -0.002441801130771637,\n 0.017260776832699776,\n 0.07598508894443512,\n 0.0009232430020347238,\n -0.04267434403300285,\n 0.008381499908864498,\n 0.0760388970375061,\n -0.047275424003601074,\n 0.015081318095326424,\n 0.014247204177081585,\n 0.024700535461306572,\n 0.010197714902460575,\n -0.000978738535195589,\n 0.013789786025881767,\n -0.010103541426360607,\n -0.020704859867691994,\n -0.001531170797534287,\n -0.011717955581843853,\n 0.04934725537896156,\n 0.0010939337080344558,\n 0.037831101566553116,\n -0.019332608208060265,\n 0.005855614319443703,\n -0.046279869973659515,\n -0.0045439028181135654,\n -0.022359633818268776,\n 0.008751469664275646,\n -0.02657056413590908,\n -0.05440575256943703,\n -0.04423494264483452,\n 0.019332608208060265,\n -0.03091602772474289,\n -0.06037908419966698,\n -0.018888644874095917,\n 0.004372371360659599,\n -0.02389332838356495,\n -0.012027384713292122,\n -0.016601556912064552,\n 0.0022013208363205194,\n -0.00802498310804367,\n 0.01529657281935215,\n -0.014960236847400665,\n 0.01245789509266615,\n 0.014502819627523422,\n -0.027687201276421547,\n -0.022790145128965378,\n 0.05666593089699745,\n 0.061024848371744156,\n -0.04929343983530998,\n 0.014610446989536285,\n -0.027323957532644272,\n 0.013251648284494877,\n -0.0205434188246727,\n 0.0298666600137949,\n 0.022507622838020325,\n 0.00819987803697586,\n -0.04068323224782944,\n -0.026584018021821976,\n 0.004533812869340181,\n -0.12474039196968079,\n 0.009417415596544743,\n 0.031803958117961884,\n -0.031077470630407333,\n 0.005801800638437271,\n 0.030835308134555817,\n 0.05367926508188248,\n -0.039553143084049225,\n 0.02342245727777481,\n -0.05375998839735985,\n 0.00868420209735632,\n -0.01152287982404232,\n 0.019534409046173096,\n -0.04184022918343544,\n -0.043131761252880096,\n -0.04297031834721565,\n 0.005852250847965479,\n 0.057526953518390656,\n -0.031481072306632996,\n 0.019911106675863266,\n 0.03944551572203636,\n 0.03982221335172653,\n 0.01127399131655693,\n -0.0002850449818652123,\n -0.045553382486104965,\n 0.0018666662508621812,\n -0.040656328201293945,\n -0.013446723110973835,\n -0.049105092883110046,\n 0.047275424003601074,\n 0.056450676172971725,\n -0.047248516231775284,\n -0.010890567675232887,\n -0.00996228028088808,\n -0.005926244892179966,\n -0.04119446501135826,\n -0.008791829459369183,\n 0.026086239144206047,\n -0.009948826394975185,\n -0.00625585438683629,\n 0.030377890914678574,\n 0.060648154467344284,\n -0.051230739802122116,\n 0.025776810944080353,\n 0.00377705623395741,\n -0.002621741034090519,\n 0.024512186646461487,\n -0.016816813498735428,\n -0.02782173454761505,\n 0.015054411254823208,\n 0.05510533228516579,\n 0.039580050855875015,\n -0.04436947777867317,\n -0.007897174917161465,\n -0.008146064355969429,\n 0.00850930716842413,\n -0.011744862422347069,\n 0.002426665974780917,\n -0.04361608624458313,\n -0.002248407807201147,\n 0.023974047973752022,\n 0.020933568477630615,\n -0.0211219172924757,\n -0.04509596526622772,\n -0.0192249808460474,\n 0.02634185552597046,\n 0.023449363186955452,\n -0.04958941787481308,\n -0.01622486114501953,\n -0.025238672271370888,\n 0.02852131426334381,\n 0.04541884735226631,\n 0.0022921315394341946,\n 0.019090445712208748,\n -0.026584018021821976,\n -0.011179816909134388,\n -0.004473272245377302,\n -0.006804082542657852,\n -0.011913030408322811,\n 0.0008563962182961404,\n -0.03298785910010338,\n 0.056235421448946,\n 0.023476270958781242,\n 0.0019675670191645622,\n 0.004510269034653902,\n -0.03659338504076004,\n 0.0669981837272644,\n 0.00536792678758502,\n -0.021565880626440048,\n 0.02427002415060997,\n -0.00038993984344415367,\n 0.012706783600151539,\n -0.05136527121067047,\n -0.031884677708148956,\n -0.02342245727777481,\n -0.04186713695526123,\n -1.4254876077757217e-05,\n 0.07087277621030807,\n -0.00837477296590805,\n -0.05246845632791519,\n 0.058603230863809586,\n -0.014677714556455612,\n -0.0541904978454113,\n -0.0020482877735048532,\n -0.04932034760713577,\n -0.017879635095596313,\n 0.041275184601545334,\n 0.02229236625134945,\n -0.011226904578506947,\n -0.03161560744047165,\n -0.07937535643577576,\n 0.07157235592603683,\n 0.08513343334197998,\n -0.04122137278318405,\n 0.030889121815562248,\n -0.013339095748960972,\n -0.008536214008927345,\n -0.008213330991566181,\n 0.04996611550450325,\n 0.01458354014903307,\n 0.020879754796624184,\n 0.01826978474855423,\n 0.02429693192243576,\n -0.021431345492601395,\n -0.010500418022274971,\n -0.004325284156948328,\n 0.036727920174598694,\n -0.021350625902414322,\n -0.005657176021486521,\n -0.0071572354063391685,\n -0.0387459360063076,\n -0.0011199996806681156,\n -0.006037235725671053,\n 0.034252483397722244,\n 0.04563410207629204,\n -0.016103779897093773,\n -0.042728159576654434,\n -0.022413447499275208,\n 0.011119276285171509,\n 0.04076395556330681,\n 0.017960356548428535,\n 0.02724323607981205,\n 0.005418376997113228,\n -0.02036852389574051,\n 0.017166603356599808,\n -0.01021116878837347,\n 0.006659457925707102,\n -0.027458492666482925,\n 0.042728159576654434,\n -0.02106810361146927,\n -0.048728395253419876,\n -0.062101125717163086,\n -0.035301852971315384,\n -0.02779482863843441,\n 0.012632790021598339,\n -0.027404678985476494,\n 0.004089849069714546,\n -0.013897414319217205,\n -0.016615010797977448,\n -0.013164200820028782,\n 0.04385824874043465,\n -0.0075810193084180355,\n 0.03266497701406479,\n -0.004355554468929768,\n -0.025803716853260994,\n 0.0032876869663596153,\n -0.005179578438401222,\n -0.017328044399619102,\n -0.01981693133711815,\n 0.0369969867169857,\n -0.025763357058167458,\n -0.0014664260670542717,\n 0.010513870976865292,\n 0.033983416855335236,\n -0.05131145939230919,\n 0.008832190185785294,\n 0.027081795036792755,\n -0.01144888624548912,\n 0.007722280453890562,\n -0.02479470893740654,\n 0.03277260437607765,\n 0.02774101495742798,\n 0.016278674826025963,\n -0.02039542980492115,\n 0.025911344215273857,\n -0.002879038453102112,\n -0.0013175972271710634,\n -0.041651882231235504,\n 0.038153983652591705,\n 0.0025460654869675636,\n 0.07695373892784119,\n 0.0007592791225761175,\n 0.04294341430068016,\n -0.005845523905009031,\n -0.001709428965114057,\n 0.04154425486922264,\n 0.015901979058980942,\n -0.01701861433684826,\n 0.05951806530356407,\n -0.0013714110245928168,\n -0.008959997445344925,\n 0.009585583582520485,\n 0.05666593089699745,\n -0.02784864231944084,\n 0.01347362995147705,\n -0.045849356800317764,\n 0.019857292994856834,\n -0.019332608208060265,\n 0.0009694892796687782,\n -0.04003746807575226,\n 0.023449363186955452,\n -0.06199349835515022,\n 0.009477955289185047,\n -0.015713630244135857,\n -0.015162038616836071,\n -0.00862366147339344,\n 0.045553382486104965,\n 0.021538974717259407,\n 0.0020180174615234137,\n 0.013756153173744678,\n 0.014664260670542717,\n -0.02706834115087986,\n -0.004664984066039324,\n 0.010830027051270008,\n 0.007224502973258495,\n -0.016951346769928932,\n -0.04372371360659599,\n 0.05427121743559837,\n 0.012767324224114418,\n 0.04579554498195648,\n -0.02657056413590908,\n -0.027902456000447273,\n 0.02179458923637867,\n -0.03651266545057297,\n -0.011987023986876011,\n -0.0041941129602491856,\n 0.033929601311683655,\n -0.02712215483188629,\n 0.004288287367671728,\n 0.004399278201162815,\n -0.017381858080625534,\n -0.005243482068181038,\n 0.016413209959864616,\n -0.02464671991765499,\n -0.01762402057647705,\n -0.009868105873465538,\n 0.0716799795627594,\n -0.024727441370487213,\n -0.019534409046173096,\n 0.021256450563669205,\n -0.006609007250517607,\n -0.006915073376148939,\n 0.00413020933046937,\n -0.01210810523480177,\n 0.03384888172149658,\n 0.030431704595685005,\n -0.007258136291056871,\n -0.04081776738166809,\n -0.007345583755522966,\n 0.04385824874043465,\n 0.013298735953867435,\n 0.01475843507796526,\n 0.032153744250535965,\n -0.0036324316170066595,\n -0.03479062393307686,\n -0.015175491571426392,\n 0.0117986761033535,\n -0.00017373869195580482,\n 0.059625692665576935,\n -0.009249246679246426,\n 0.04036035016179085,\n 0.03371434658765793,\n -0.019736211746931076,\n -0.026610923931002617,\n 0.010325523093342781,\n -0.005855614319443703,\n 0.0206914059817791,\n 0.011381618678569794,\n -0.01701861433684826,\n 0.008576574735343456,\n 0.03352599963545799,\n -0.011563240550458431,\n 0.004426185041666031,\n 0.00951158907264471,\n 0.007809727918356657,\n -0.01757020689547062,\n -0.021808043122291565,\n -0.015188945457339287,\n -0.022682517766952515,\n -0.05763458088040352,\n 0.04716779664158821,\n -0.023664619773626328,\n 0.007527205627411604,\n 0.011401799507439137,\n -0.02022053487598896,\n -0.03347218409180641,\n 0.012229186482727528,\n 0.05112311244010925,\n -0.0036391583271324635,\n -0.023503176867961884,\n 0.004083122126758099,\n -0.052280109375715256,\n 0.033956509083509445,\n 0.03191158547997475,\n -0.025036871433258057,\n 0.00199615559540689,\n -0.023261016234755516,\n -0.03928407281637192,\n -0.0007407806115224957,\n -0.0041201189160346985,\n 0.00614150008186698,\n 0.019036632031202316,\n -0.014153029769659042,\n 0.025911344215273857,\n -0.032557349652051926,\n 0.04006437584757805,\n 0.03062005341053009,\n -0.028063897043466568,\n 0.0187944695353508,\n -0.08260418474674225,\n -0.0015959155280143023,\n -0.03573236241936684,\n -0.00360216130502522,\n 0.03624359518289566,\n 0.02631494775414467,\n -0.04617224261164665,\n 0.002162642078474164,\n -0.006302941590547562,\n 0.058603230863809586,\n 0.02322065457701683,\n -0.0025494287256151438,\n 0.009013812057673931,\n 0.008832190185785294,\n 0.0022988582495599985,\n -0.009350148029625416,\n -0.05384070798754692,\n -0.003153152298182249,\n -0.013857053592801094,\n -0.040548697113990784,\n 0.017812367528676987,\n 0.0035248040221631527,\n -0.04358917847275734,\n 0.013177654705941677,\n 0.013978134840726852,\n 0.03134653717279434,\n 0.015175491571426392,\n -0.0002869368763640523,\n 0.01687062717974186,\n 0.01992456056177616,\n 0.026449482887983322,\n -0.0039048639591783285,\n 0.0231668408960104,\n -0.04773284122347832,\n 0.052172478288412094,\n 0.006410568952560425,\n -0.0035718909930437803,\n -0.02284395880997181,\n 0.023328281939029694,\n -0.016305582597851753,\n -0.02229236625134945,\n -0.012525161728262901,\n 0.025077231228351593,\n 0.008226784877479076,\n -0.023758793249726295,\n -0.020314710214734077,\n -0.018202519044280052,\n -0.05445956811308861,\n 0.01547146774828434,\n -0.044154223054647446,\n 0.0001709008647594601,\n 0.027525758370757103,\n 0.007002520840615034,\n 0.04143662750720978,\n 0.02919398620724678,\n -0.003316275542601943,\n 0.009773931466042995,\n -0.07211049646139145,\n 0.026732005178928375,\n -0.004042761866003275,\n -0.010231348685920238,\n -0.034333206713199615,\n 0.06193968653678894,\n 0.0640922337770462,\n -0.015484921634197235,\n -0.009706663899123669,\n -0.008280598558485508,\n 0.005670629441738129,\n -0.013251648284494877,\n -0.002973212394863367,\n -0.02879038266837597,\n -0.007143781986087561,\n -0.04157116264104843,\n -0.0066998181864619255,\n 0.01987074688076973,\n 0.06199349835515022,\n -0.006968887057155371,\n -0.04687182232737541,\n -0.014193389564752579,\n 0.007399397436529398,\n -0.03374125435948372,\n -0.043481551110744476,\n -0.008139337413012981,\n 0.007634832989424467,\n -0.005532731302082539,\n 0.012087925337255001,\n -0.003134653903543949,\n 0.009518316015601158,\n 0.028252245858311653,\n -0.012000477872788906,\n -0.030835308134555817,\n 0.026624377816915512,\n 0.032557349652051926,\n -0.006575373932719231,\n -0.00798462238162756,\n -0.0033515908289700747,\n 0.019386421889066696,\n -0.05160743370652199,\n -0.022104019299149513,\n 0.008516034111380577,\n 0.027875548228621483,\n 0.019628584384918213,\n 0.004991230089217424,\n 0.028655849397182465,\n 0.01359471119940281,\n -0.007782821077853441,\n -0.01109909638762474,\n -0.0005763962399214506,\n 0.011953390203416348,\n -0.004738977644592524,\n -0.022790145128965378,\n 0.007096694782376289,\n 0.02948996238410473,\n -0.006481199525296688,\n -0.0007987986318767071,\n -0.011475793085992336,\n -0.00785008817911148,\n 0.04687182232737541,\n 0.006397115532308817,\n -0.002424984471872449,\n 0.025157952681183815,\n 0.00809897668659687,\n -0.016332488507032394,\n -0.013897414319217205,\n -0.012081198394298553,\n 0.03387578949332237,\n 0.0027613206766545773,\n -0.02149861305952072,\n -0.006656094454228878,\n 0.015148584730923176,\n 0.06586809456348419,\n 0.004765884950757027,\n -0.010439877398312092,\n 0.013762879185378551,\n 0.027956269681453705,\n -9.002249862533063e-05,\n 0.03177705034613609,\n 0.007190869189798832,\n -0.0212699044495821,\n -0.03772347420454025,\n -0.038530681282281876,\n -0.03616287559270859,\n -0.024014407768845558,\n -0.026032425463199615,\n -0.06387697905302048,\n 0.021175730973482132,\n -0.007587745785713196,\n 0.033929601311683655,\n 0.026355309411883354,\n 0.0013167564757168293,\n -0.004880239255726337,\n -0.004715434275567532,\n -0.0167495459318161,\n -0.0015866663306951523,\n 0.029705218970775604,\n -0.04119446501135826,\n 0.048755303025245667,\n 0.02182149700820446,\n 0.014368284493684769,\n 0.024700535461306572,\n -0.032207559794187546,\n 0.012188825756311417,\n 0.003978857770562172,\n 0.009249246679246426,\n 0.04264743626117706,\n 0.0012848045444115996,\n -0.0352480411529541,\n -0.018000716343522072,\n -0.02034161612391472,\n -0.029382335022091866,\n 0.03702389448881149,\n 0.011785222217440605,\n 0.006400479003787041,\n -0.022238552570343018,\n -0.04845932871103287,\n 0.027552666142582893,\n -0.014166482724249363,\n -0.01102510280907154,\n -0.0018464860040694475,\n 0.0025527921970933676,\n -0.04958941787481308,\n -0.024956149980425835,\n 0.03772347420454025,\n -0.021565880626440048,\n -0.05410977825522423,\n -0.004147026222199202,\n 0.03053933195769787,\n -0.011354711838066578,\n 0.011778495274484158,\n -0.015202398411929607,\n -0.021888762712478638,\n -0.008253691717982292,\n -0.042378369718790054,\n 0.0026671465020626783,\n 0.028225338086485863,\n -0.00250906846486032,\n 0.016789905726909637,\n -0.018606122583150864,\n 0.0023072666954249144,\n -0.02369152568280697,\n 0.01987074688076973,\n 0.012901858426630497,\n 0.014960236847400665,\n 0.0059800585731863976,\n -0.0016825221246108413,\n -0.006575373932719231,\n -0.005008046980947256,\n -0.008657295256853104,\n -0.01654774323105812,\n 0.00396204087883234,\n -0.02334173582494259,\n 0.04958941787481308,\n 0.020852847024798393,\n 0.0028454046696424484,\n -0.01757020689547062,\n 0.05203794687986374,\n 0.014260657131671906,\n 0.013083480298519135,\n 0.03137344494462013,\n 0.009531769901514053,\n -0.013339095748960972,\n 0.026705099269747734,\n 0.004022581502795219,\n 0.0033717709593474865,\n 0.0017573569202795625,\n 0.012908585369586945,\n -0.020489605143666267,\n -0.028117710724473,\n -0.01844467967748642,\n -0.021027741953730583,\n 0.02234617993235588,\n -0.004634713754057884,\n 0.07496262341737747,\n -0.016278674826025963,\n -0.006239037495106459,\n -0.009074351750314236,\n 0.010049727745354176,\n 0.019467143341898918,\n 0.014193389564752579,\n -0.008072069846093655,\n -0.019561316817998886,\n 0.00862366147339344,\n -0.014314470812678337,\n 0.04251290112733841,\n 0.0033566358033567667,\n 0.03659338504076004,\n 0.0019103899830952287,\n -0.030108822509646416,\n -0.007305223494768143,\n 0.0018733929609879851,\n -0.024431465193629265,\n 0.01335927564650774,\n 0.006326484959572554,\n -0.04105992987751961,\n -0.03629740700125694,\n -0.0020953749772161245,\n 0.028924917802214622,\n 0.029785938560962677,\n 0.01069549284875393,\n -0.003615614725276828,\n -0.0005154352984391153,\n -0.02922089397907257,\n -0.021808043122291565,\n -0.0036324316170066595,\n 0.04243218153715134,\n -0.010480238124728203,\n -0.03156179562211037,\n 0.022709423676133156,\n 0.004443001933395863,\n -0.01286149863153696,\n -0.03826161101460457,\n 0.024660173803567886,\n -0.011004921980202198,\n -0.006393752060830593,\n 0.02114882320165634,\n 0.026906900107860565,\n -0.023462817072868347,\n -0.024135489016771317,\n 0.03446773812174797,\n 0.028036991134285927,\n 0.014341377653181553,\n -0.04700635373592377,\n 0.005378016736358404,\n -0.02914017252624035,\n 0.0093232411891222,\n -0.05881848558783531,\n -0.0029210804495960474,\n -0.029678311198949814,\n -0.060701966285705566,\n -0.006797355599701405,\n 0.002322401851415634,\n -0.034306298941373825,\n 0.0004843242058996111,\n -0.023651165887713432,\n 0.01073585357517004,\n -0.021310264244675636,\n -0.035005878657102585,\n 0.0028050444088876247,\n -0.01596924476325512,\n 0.03126581758260727,\n 0.018256332725286484,\n 0.0285482220351696,\n -0.01844467967748642,\n 0.013688885606825352,\n 0.02581717073917389,\n 0.0167495459318161,\n -0.0010073271114379168,\n -0.023826060816645622,\n -0.01404540240764618,\n 0.015054411254823208,\n -0.01493333000689745,\n -0.022978492081165314,\n 0.02494269609451294,\n 0.04407350346446037,\n 0.022938132286071777,\n -0.016655370593070984,\n 0.012807684950530529,\n 0.001075435196980834,\n 0.001704383990727365,\n -0.016386302188038826,\n -7.651649502804503e-05,\n 0.011771769262850285,\n 0.01046005729585886,\n -0.028575127944350243,\n -0.003598797833546996,\n 0.004406005144119263,\n -0.012377174571156502,\n 0.017704740166664124,\n -0.0015740536618977785,\n -0.017112787812948227,\n 0.021565880626440048,\n -0.01887519098818302,\n 0.030862214043736458,\n 0.00434210104867816,\n 0.05147290229797363,\n -0.020449243485927582,\n 0.006454292684793472,\n 0.011926483362913132,\n 0.0012721918756142259,\n -0.001787627232261002,\n 0.003323002252727747,\n 0.04606461524963379,\n -0.003995674662292004,\n 0.01133453194051981,\n 0.0022013208363205194,\n 0.0026419213972985744,\n 0.0064273858442902565,\n -0.04157116264104843,\n 0.022332727909088135,\n -0.042324554175138474,\n -0.018431227654218674,\n -0.006249127443879843,\n 0.009444322437047958,\n -0.024108583107590675,\n -0.0015706903068348765,\n 0.01404540240764618,\n -0.017812367528676987,\n 0.0015967563958838582,\n 0.011516153812408447,\n 0.022211646661162376,\n -0.04229764640331268,\n -0.024175850674510002,\n -0.046279869973659515,\n -0.01168432179838419,\n 0.005357836373150349,\n 0.005263662431389093,\n 0.044907618314027786,\n -0.01824287883937359,\n -0.032207559794187546,\n 0.010641679167747498,\n 0.003783782944083214,\n 0.004570809658616781,\n -0.04751758649945259,\n 0.02071831375360489,\n 0.04009127989411354,\n 0.004762521479278803,\n -0.026678191497921944,\n -0.014395191334187984,\n 0.008838917128741741,\n 0.006434112787246704,\n -0.008267145603895187,\n 0.021525520831346512,\n 0.03406413644552231,\n -0.012101378291845322,\n -0.012356993742287159,\n 0.005690809339284897,\n -0.03982221335172653,\n 0.006400479003787041,\n 0.0035483473911881447,\n 0.02304575964808464,\n -0.00011897894728463143,\n 0.02071831375360489,\n 0.008327685296535492,\n -0.018552307039499283,\n -0.014206843450665474,\n 0.046898726373910904,\n 0.0218484029173851,\n -0.023974047973752022,\n 0.014287563972175121,\n 0.03376815840601921,\n -0.003514713840559125,\n -0.018565760925412178,\n 0.0023139934055507183,\n -0.006820899434387684,\n -0.006615734193474054,\n 0.006568646989762783,\n 0.02922089397907257,\n 0.00862366147339344,\n -0.01687062717974186,\n -0.03522113338112831,\n -0.010668586008250713,\n 0.0003584083169698715,\n -0.0030942936427891254,\n 0.0010552549501881003,\n -0.0161710474640131,\n 0.02601897343993187,\n -0.008072069846093655,\n 0.021538974717259407,\n -0.02456600032746792,\n -0.0029093085322529078,\n 0.012942219153046608,\n -0.043454643338918686,\n -0.012854771688580513,\n 0.026207320392131805,\n -0.006733451969921589,\n -0.03209993243217468,\n 0.016063420102000237,\n -0.026032425463199615,\n -0.012195552699267864,\n -0.002974894130602479,\n -0.01949404925107956,\n -0.005391470156610012,\n 0.019655490294098854,\n 0.018485041335225105,\n 0.017139695584774017,\n 0.033283837139606476,\n -0.014731528237462044,\n -0.0006108707166276872,\n -0.012377174571156502,\n 0.0495356023311615,\n 0.050100646913051605,\n 0.0015606002416461706,\n -0.00031111104181036353,\n 0.001344504184089601,\n -0.02948996238410473,\n 0.020758673548698425,\n 0.04474617540836334,\n -0.05475554242730141,\n 0.02784864231944084,\n -0.006649367976933718,\n -0.007708827033638954,\n 0.022790145128965378,\n 0.04264743626117706,\n 0.010338976047933102,\n 0.006767085287719965,\n -0.036028340458869934,\n -0.026032425463199615,\n 0.01494678296148777,\n 0.02324756234884262,\n 0.01347362995147705,\n 0.008246964775025845,\n -0.014341377653181553,\n 0.003151470795273781,\n -0.0016581377713009715,\n -0.00967303104698658,\n 0.006259217858314514,\n -0.02124299854040146,\n -0.010675312951207161,\n 0.027202876284718513,\n 0.014879516325891018,\n 0.009269427508115768,\n 0.010675312951207161,\n -0.007937535643577576,\n 0.02121609076857567,\n 0.02779482863843441,\n 0.018135251477360725,\n -0.007567565888166428,\n -0.0042714704759418964,\n -0.002071831375360489,\n -0.006245764438062906,\n 0.0018363959388807416,\n -0.014650807715952396,\n -0.0521455742418766,\n 0.02922089397907257,\n 0.024485278874635696,\n 0.047975003719329834,\n 0.009081078693270683,\n 0.015592548996210098,\n 0.022238552570343018,\n -0.0061784968711435795,\n 0.006121319718658924,\n -0.01894245855510235,\n -0.04353536665439606,\n -0.016937894746661186,\n 0.0056975362822413445,\n -0.004089849069714546,\n -0.009121439419686794,\n -0.032853323966264725,\n 0.0556434690952301,\n 0.006935253739356995,\n -0.017435671761631966,\n 0.029086358845233917,\n 0.029624497517943382,\n -0.016036512330174446,\n 0.01809488981962204,\n 0.007897174917161465,\n -0.013453450053930283,\n -0.051580529659986496,\n 0.030512424185872078,\n 0.0027512304950505495,\n -0.031104376539587975,\n -0.03099674917757511,\n 0.03879975154995918,\n 0.0193729680031538,\n 0.00539819709956646,\n 0.06226256862282753,\n 0.00551255140453577,\n 0.017906542867422104,\n -0.004089849069714546,\n -0.015229305252432823,\n -0.0192249808460474,\n -0.023651165887713432,\n -0.002043242799118161,\n 0.0007563361432403326,\n 0.007587745785713196,\n -0.010830027051270008,\n 0.008246964775025845,\n 0.044127315282821655,\n -0.008919637650251389,\n -0.005472190678119659,\n 0.012404081411659718,\n -0.01666882447898388,\n -0.016426661983132362,\n -0.02474089525640011,\n -0.012195552699267864,\n -0.0016488884575664997,\n -0.004607806913554668,\n -0.01870029605925083,\n -0.013830146752297878,\n 0.009713390842080116,\n 0.015632908791303635,\n -0.0273912250995636,\n 0.0006550148827955127,\n 0.03656647726893425,\n -0.01140852551907301,\n 0.0023745340295135975,\n -0.017287682741880417,\n -0.035328760743141174,\n 0.025884438306093216,\n 0.04052179306745529,\n -0.006302941590547562,\n 0.023624258115887642,\n 0.02266906388103962,\n 0.02584407851099968,\n -0.005145944654941559,\n -0.005293932743370533,\n 0.001347026671282947,\n 0.01459699310362339,\n 0.006010328885167837,\n -0.016184501349925995,\n -0.014475912787020206,\n 0.007305223494768143,\n -0.006706545129418373,\n -0.02092011459171772,\n 0.03452155366539955,\n 0.03976839780807495,\n -0.003048888174816966,\n -0.025938251987099648,\n -0.011354711838066578,\n -0.02129681222140789,\n -0.0167495459318161,\n ...]",
    "crumbs": [
      "Embeddings"
    ]
  },
  {
    "objectID": "embedding/base.html#embeddings",
    "href": "embedding/base.html#embeddings",
    "title": "ragas_experimental",
    "section": "",
    "text": "source\n\n\n\n ragas_embedding (provider:str, model:str, client:Any)\n\n*Factory function to create an embedding instance based on the provider.\nArgs: provider (str): The name of the embedding provider (e.g., “openai”). model (str): The model name to use for embeddings. **kwargs: Additional arguments for the provider’s client.\nReturns: BaseEmbedding: An instance of the specified embedding provider.*\n\nsource\n\n\n\n\n OpenAIEmbeddings (client:Any, model:str)\n\nHelper class that provides a standard way to create an ABC using inheritance.\n\nsource\n\n\n\n\n BaseEmbedding ()\n\nHelper class that provides a standard way to create an ABC using inheritance.\n\n\n\n\n## change to this design\nfrom openai import OpenAI\nembedding_model = ragas_embedding(provider=\"openai\", model=\"text-embedding-3-small\", client=OpenAI())\nembedding_model.embed_text(\"Hello, world!\")\n\n[-0.019184619188308716,\n -0.025279032066464424,\n -0.0017195191467180848,\n 0.01884828321635723,\n -0.033795066177845,\n -0.01969585195183754,\n -0.02094702236354351,\n 0.051580529659986496,\n -0.03212684020400047,\n -0.030377890914678574,\n -0.002145825419574976,\n -0.028978731483221054,\n -0.0024737531784921885,\n -0.031481072306632996,\n 0.010332250036299229,\n 0.018606122583150864,\n -0.04614533483982086,\n 0.04146353527903557,\n 0.0004418617463670671,\n 0.04122137278318405,\n 0.05367926508188248,\n 0.0018733929609879851,\n 0.0045674461871385574,\n 0.010022819973528385,\n 0.04786737635731697,\n 0.0022013208363205194,\n -0.009834472090005875,\n 0.03847686946392059,\n 0.00089213193859905,\n -0.05211866647005081,\n 0.051150016486644745,\n -0.032557349652051926,\n -0.014031948521733284,\n -0.012632790021598339,\n 0.013271828182041645,\n 0.018565760925412178,\n 0.0016068464610725641,\n -0.0008185583865270019,\n -0.012753871269524097,\n -0.029705218970775604,\n -0.004443001933395863,\n -0.015323479659855366,\n 0.025655729696154594,\n 0.009107985533773899,\n -0.03686245530843735,\n 0.020328164100646973,\n -0.04071014001965523,\n -0.002621741034090519,\n 0.03549019992351532,\n 0.04851314052939415,\n -0.03368743881583214,\n -0.002441801130771637,\n 0.017260776832699776,\n 0.07598508894443512,\n 0.0009232430020347238,\n -0.04267434403300285,\n 0.008381499908864498,\n 0.0760388970375061,\n -0.047275424003601074,\n 0.015081318095326424,\n 0.014247204177081585,\n 0.024700535461306572,\n 0.010197714902460575,\n -0.000978738535195589,\n 0.013789786025881767,\n -0.010103541426360607,\n -0.020704859867691994,\n -0.001531170797534287,\n -0.011717955581843853,\n 0.04934725537896156,\n 0.0010939337080344558,\n 0.037831101566553116,\n -0.019332608208060265,\n 0.005855614319443703,\n -0.046279869973659515,\n -0.0045439028181135654,\n -0.022359633818268776,\n 0.008751469664275646,\n -0.02657056413590908,\n -0.05440575256943703,\n -0.04423494264483452,\n 0.019332608208060265,\n -0.03091602772474289,\n -0.06037908419966698,\n -0.018888644874095917,\n 0.004372371360659599,\n -0.02389332838356495,\n -0.012027384713292122,\n -0.016601556912064552,\n 0.0022013208363205194,\n -0.00802498310804367,\n 0.01529657281935215,\n -0.014960236847400665,\n 0.01245789509266615,\n 0.014502819627523422,\n -0.027687201276421547,\n -0.022790145128965378,\n 0.05666593089699745,\n 0.061024848371744156,\n -0.04929343983530998,\n 0.014610446989536285,\n -0.027323957532644272,\n 0.013251648284494877,\n -0.0205434188246727,\n 0.0298666600137949,\n 0.022507622838020325,\n 0.00819987803697586,\n -0.04068323224782944,\n -0.026584018021821976,\n 0.004533812869340181,\n -0.12474039196968079,\n 0.009417415596544743,\n 0.031803958117961884,\n -0.031077470630407333,\n 0.005801800638437271,\n 0.030835308134555817,\n 0.05367926508188248,\n -0.039553143084049225,\n 0.02342245727777481,\n -0.05375998839735985,\n 0.00868420209735632,\n -0.01152287982404232,\n 0.019534409046173096,\n -0.04184022918343544,\n -0.043131761252880096,\n -0.04297031834721565,\n 0.005852250847965479,\n 0.057526953518390656,\n -0.031481072306632996,\n 0.019911106675863266,\n 0.03944551572203636,\n 0.03982221335172653,\n 0.01127399131655693,\n -0.0002850449818652123,\n -0.045553382486104965,\n 0.0018666662508621812,\n -0.040656328201293945,\n -0.013446723110973835,\n -0.049105092883110046,\n 0.047275424003601074,\n 0.056450676172971725,\n -0.047248516231775284,\n -0.010890567675232887,\n -0.00996228028088808,\n -0.005926244892179966,\n -0.04119446501135826,\n -0.008791829459369183,\n 0.026086239144206047,\n -0.009948826394975185,\n -0.00625585438683629,\n 0.030377890914678574,\n 0.060648154467344284,\n -0.051230739802122116,\n 0.025776810944080353,\n 0.00377705623395741,\n -0.002621741034090519,\n 0.024512186646461487,\n -0.016816813498735428,\n -0.02782173454761505,\n 0.015054411254823208,\n 0.05510533228516579,\n 0.039580050855875015,\n -0.04436947777867317,\n -0.007897174917161465,\n -0.008146064355969429,\n 0.00850930716842413,\n -0.011744862422347069,\n 0.002426665974780917,\n -0.04361608624458313,\n -0.002248407807201147,\n 0.023974047973752022,\n 0.020933568477630615,\n -0.0211219172924757,\n -0.04509596526622772,\n -0.0192249808460474,\n 0.02634185552597046,\n 0.023449363186955452,\n -0.04958941787481308,\n -0.01622486114501953,\n -0.025238672271370888,\n 0.02852131426334381,\n 0.04541884735226631,\n 0.0022921315394341946,\n 0.019090445712208748,\n -0.026584018021821976,\n -0.011179816909134388,\n -0.004473272245377302,\n -0.006804082542657852,\n -0.011913030408322811,\n 0.0008563962182961404,\n -0.03298785910010338,\n 0.056235421448946,\n 0.023476270958781242,\n 0.0019675670191645622,\n 0.004510269034653902,\n -0.03659338504076004,\n 0.0669981837272644,\n 0.00536792678758502,\n -0.021565880626440048,\n 0.02427002415060997,\n -0.00038993984344415367,\n 0.012706783600151539,\n -0.05136527121067047,\n -0.031884677708148956,\n -0.02342245727777481,\n -0.04186713695526123,\n -1.4254876077757217e-05,\n 0.07087277621030807,\n -0.00837477296590805,\n -0.05246845632791519,\n 0.058603230863809586,\n -0.014677714556455612,\n -0.0541904978454113,\n -0.0020482877735048532,\n -0.04932034760713577,\n -0.017879635095596313,\n 0.041275184601545334,\n 0.02229236625134945,\n -0.011226904578506947,\n -0.03161560744047165,\n -0.07937535643577576,\n 0.07157235592603683,\n 0.08513343334197998,\n -0.04122137278318405,\n 0.030889121815562248,\n -0.013339095748960972,\n -0.008536214008927345,\n -0.008213330991566181,\n 0.04996611550450325,\n 0.01458354014903307,\n 0.020879754796624184,\n 0.01826978474855423,\n 0.02429693192243576,\n -0.021431345492601395,\n -0.010500418022274971,\n -0.004325284156948328,\n 0.036727920174598694,\n -0.021350625902414322,\n -0.005657176021486521,\n -0.0071572354063391685,\n -0.0387459360063076,\n -0.0011199996806681156,\n -0.006037235725671053,\n 0.034252483397722244,\n 0.04563410207629204,\n -0.016103779897093773,\n -0.042728159576654434,\n -0.022413447499275208,\n 0.011119276285171509,\n 0.04076395556330681,\n 0.017960356548428535,\n 0.02724323607981205,\n 0.005418376997113228,\n -0.02036852389574051,\n 0.017166603356599808,\n -0.01021116878837347,\n 0.006659457925707102,\n -0.027458492666482925,\n 0.042728159576654434,\n -0.02106810361146927,\n -0.048728395253419876,\n -0.062101125717163086,\n -0.035301852971315384,\n -0.02779482863843441,\n 0.012632790021598339,\n -0.027404678985476494,\n 0.004089849069714546,\n -0.013897414319217205,\n -0.016615010797977448,\n -0.013164200820028782,\n 0.04385824874043465,\n -0.0075810193084180355,\n 0.03266497701406479,\n -0.004355554468929768,\n -0.025803716853260994,\n 0.0032876869663596153,\n -0.005179578438401222,\n -0.017328044399619102,\n -0.01981693133711815,\n 0.0369969867169857,\n -0.025763357058167458,\n -0.0014664260670542717,\n 0.010513870976865292,\n 0.033983416855335236,\n -0.05131145939230919,\n 0.008832190185785294,\n 0.027081795036792755,\n -0.01144888624548912,\n 0.007722280453890562,\n -0.02479470893740654,\n 0.03277260437607765,\n 0.02774101495742798,\n 0.016278674826025963,\n -0.02039542980492115,\n 0.025911344215273857,\n -0.002879038453102112,\n -0.0013175972271710634,\n -0.041651882231235504,\n 0.038153983652591705,\n 0.0025460654869675636,\n 0.07695373892784119,\n 0.0007592791225761175,\n 0.04294341430068016,\n -0.005845523905009031,\n -0.001709428965114057,\n 0.04154425486922264,\n 0.015901979058980942,\n -0.01701861433684826,\n 0.05951806530356407,\n -0.0013714110245928168,\n -0.008959997445344925,\n 0.009585583582520485,\n 0.05666593089699745,\n -0.02784864231944084,\n 0.01347362995147705,\n -0.045849356800317764,\n 0.019857292994856834,\n -0.019332608208060265,\n 0.0009694892796687782,\n -0.04003746807575226,\n 0.023449363186955452,\n -0.06199349835515022,\n 0.009477955289185047,\n -0.015713630244135857,\n -0.015162038616836071,\n -0.00862366147339344,\n 0.045553382486104965,\n 0.021538974717259407,\n 0.0020180174615234137,\n 0.013756153173744678,\n 0.014664260670542717,\n -0.02706834115087986,\n -0.004664984066039324,\n 0.010830027051270008,\n 0.007224502973258495,\n -0.016951346769928932,\n -0.04372371360659599,\n 0.05427121743559837,\n 0.012767324224114418,\n 0.04579554498195648,\n -0.02657056413590908,\n -0.027902456000447273,\n 0.02179458923637867,\n -0.03651266545057297,\n -0.011987023986876011,\n -0.0041941129602491856,\n 0.033929601311683655,\n -0.02712215483188629,\n 0.004288287367671728,\n 0.004399278201162815,\n -0.017381858080625534,\n -0.005243482068181038,\n 0.016413209959864616,\n -0.02464671991765499,\n -0.01762402057647705,\n -0.009868105873465538,\n 0.0716799795627594,\n -0.024727441370487213,\n -0.019534409046173096,\n 0.021256450563669205,\n -0.006609007250517607,\n -0.006915073376148939,\n 0.00413020933046937,\n -0.01210810523480177,\n 0.03384888172149658,\n 0.030431704595685005,\n -0.007258136291056871,\n -0.04081776738166809,\n -0.007345583755522966,\n 0.04385824874043465,\n 0.013298735953867435,\n 0.01475843507796526,\n 0.032153744250535965,\n -0.0036324316170066595,\n -0.03479062393307686,\n -0.015175491571426392,\n 0.0117986761033535,\n -0.00017373869195580482,\n 0.059625692665576935,\n -0.009249246679246426,\n 0.04036035016179085,\n 0.03371434658765793,\n -0.019736211746931076,\n -0.026610923931002617,\n 0.010325523093342781,\n -0.005855614319443703,\n 0.0206914059817791,\n 0.011381618678569794,\n -0.01701861433684826,\n 0.008576574735343456,\n 0.03352599963545799,\n -0.011563240550458431,\n 0.004426185041666031,\n 0.00951158907264471,\n 0.007809727918356657,\n -0.01757020689547062,\n -0.021808043122291565,\n -0.015188945457339287,\n -0.022682517766952515,\n -0.05763458088040352,\n 0.04716779664158821,\n -0.023664619773626328,\n 0.007527205627411604,\n 0.011401799507439137,\n -0.02022053487598896,\n -0.03347218409180641,\n 0.012229186482727528,\n 0.05112311244010925,\n -0.0036391583271324635,\n -0.023503176867961884,\n 0.004083122126758099,\n -0.052280109375715256,\n 0.033956509083509445,\n 0.03191158547997475,\n -0.025036871433258057,\n 0.00199615559540689,\n -0.023261016234755516,\n -0.03928407281637192,\n -0.0007407806115224957,\n -0.0041201189160346985,\n 0.00614150008186698,\n 0.019036632031202316,\n -0.014153029769659042,\n 0.025911344215273857,\n -0.032557349652051926,\n 0.04006437584757805,\n 0.03062005341053009,\n -0.028063897043466568,\n 0.0187944695353508,\n -0.08260418474674225,\n -0.0015959155280143023,\n -0.03573236241936684,\n -0.00360216130502522,\n 0.03624359518289566,\n 0.02631494775414467,\n -0.04617224261164665,\n 0.002162642078474164,\n -0.006302941590547562,\n 0.058603230863809586,\n 0.02322065457701683,\n -0.0025494287256151438,\n 0.009013812057673931,\n 0.008832190185785294,\n 0.0022988582495599985,\n -0.009350148029625416,\n -0.05384070798754692,\n -0.003153152298182249,\n -0.013857053592801094,\n -0.040548697113990784,\n 0.017812367528676987,\n 0.0035248040221631527,\n -0.04358917847275734,\n 0.013177654705941677,\n 0.013978134840726852,\n 0.03134653717279434,\n 0.015175491571426392,\n -0.0002869368763640523,\n 0.01687062717974186,\n 0.01992456056177616,\n 0.026449482887983322,\n -0.0039048639591783285,\n 0.0231668408960104,\n -0.04773284122347832,\n 0.052172478288412094,\n 0.006410568952560425,\n -0.0035718909930437803,\n -0.02284395880997181,\n 0.023328281939029694,\n -0.016305582597851753,\n -0.02229236625134945,\n -0.012525161728262901,\n 0.025077231228351593,\n 0.008226784877479076,\n -0.023758793249726295,\n -0.020314710214734077,\n -0.018202519044280052,\n -0.05445956811308861,\n 0.01547146774828434,\n -0.044154223054647446,\n 0.0001709008647594601,\n 0.027525758370757103,\n 0.007002520840615034,\n 0.04143662750720978,\n 0.02919398620724678,\n -0.003316275542601943,\n 0.009773931466042995,\n -0.07211049646139145,\n 0.026732005178928375,\n -0.004042761866003275,\n -0.010231348685920238,\n -0.034333206713199615,\n 0.06193968653678894,\n 0.0640922337770462,\n -0.015484921634197235,\n -0.009706663899123669,\n -0.008280598558485508,\n 0.005670629441738129,\n -0.013251648284494877,\n -0.002973212394863367,\n -0.02879038266837597,\n -0.007143781986087561,\n -0.04157116264104843,\n -0.0066998181864619255,\n 0.01987074688076973,\n 0.06199349835515022,\n -0.006968887057155371,\n -0.04687182232737541,\n -0.014193389564752579,\n 0.007399397436529398,\n -0.03374125435948372,\n -0.043481551110744476,\n -0.008139337413012981,\n 0.007634832989424467,\n -0.005532731302082539,\n 0.012087925337255001,\n -0.003134653903543949,\n 0.009518316015601158,\n 0.028252245858311653,\n -0.012000477872788906,\n -0.030835308134555817,\n 0.026624377816915512,\n 0.032557349652051926,\n -0.006575373932719231,\n -0.00798462238162756,\n -0.0033515908289700747,\n 0.019386421889066696,\n -0.05160743370652199,\n -0.022104019299149513,\n 0.008516034111380577,\n 0.027875548228621483,\n 0.019628584384918213,\n 0.004991230089217424,\n 0.028655849397182465,\n 0.01359471119940281,\n -0.007782821077853441,\n -0.01109909638762474,\n -0.0005763962399214506,\n 0.011953390203416348,\n -0.004738977644592524,\n -0.022790145128965378,\n 0.007096694782376289,\n 0.02948996238410473,\n -0.006481199525296688,\n -0.0007987986318767071,\n -0.011475793085992336,\n -0.00785008817911148,\n 0.04687182232737541,\n 0.006397115532308817,\n -0.002424984471872449,\n 0.025157952681183815,\n 0.00809897668659687,\n -0.016332488507032394,\n -0.013897414319217205,\n -0.012081198394298553,\n 0.03387578949332237,\n 0.0027613206766545773,\n -0.02149861305952072,\n -0.006656094454228878,\n 0.015148584730923176,\n 0.06586809456348419,\n 0.004765884950757027,\n -0.010439877398312092,\n 0.013762879185378551,\n 0.027956269681453705,\n -9.002249862533063e-05,\n 0.03177705034613609,\n 0.007190869189798832,\n -0.0212699044495821,\n -0.03772347420454025,\n -0.038530681282281876,\n -0.03616287559270859,\n -0.024014407768845558,\n -0.026032425463199615,\n -0.06387697905302048,\n 0.021175730973482132,\n -0.007587745785713196,\n 0.033929601311683655,\n 0.026355309411883354,\n 0.0013167564757168293,\n -0.004880239255726337,\n -0.004715434275567532,\n -0.0167495459318161,\n -0.0015866663306951523,\n 0.029705218970775604,\n -0.04119446501135826,\n 0.048755303025245667,\n 0.02182149700820446,\n 0.014368284493684769,\n 0.024700535461306572,\n -0.032207559794187546,\n 0.012188825756311417,\n 0.003978857770562172,\n 0.009249246679246426,\n 0.04264743626117706,\n 0.0012848045444115996,\n -0.0352480411529541,\n -0.018000716343522072,\n -0.02034161612391472,\n -0.029382335022091866,\n 0.03702389448881149,\n 0.011785222217440605,\n 0.006400479003787041,\n -0.022238552570343018,\n -0.04845932871103287,\n 0.027552666142582893,\n -0.014166482724249363,\n -0.01102510280907154,\n -0.0018464860040694475,\n 0.0025527921970933676,\n -0.04958941787481308,\n -0.024956149980425835,\n 0.03772347420454025,\n -0.021565880626440048,\n -0.05410977825522423,\n -0.004147026222199202,\n 0.03053933195769787,\n -0.011354711838066578,\n 0.011778495274484158,\n -0.015202398411929607,\n -0.021888762712478638,\n -0.008253691717982292,\n -0.042378369718790054,\n 0.0026671465020626783,\n 0.028225338086485863,\n -0.00250906846486032,\n 0.016789905726909637,\n -0.018606122583150864,\n 0.0023072666954249144,\n -0.02369152568280697,\n 0.01987074688076973,\n 0.012901858426630497,\n 0.014960236847400665,\n 0.0059800585731863976,\n -0.0016825221246108413,\n -0.006575373932719231,\n -0.005008046980947256,\n -0.008657295256853104,\n -0.01654774323105812,\n 0.00396204087883234,\n -0.02334173582494259,\n 0.04958941787481308,\n 0.020852847024798393,\n 0.0028454046696424484,\n -0.01757020689547062,\n 0.05203794687986374,\n 0.014260657131671906,\n 0.013083480298519135,\n 0.03137344494462013,\n 0.009531769901514053,\n -0.013339095748960972,\n 0.026705099269747734,\n 0.004022581502795219,\n 0.0033717709593474865,\n 0.0017573569202795625,\n 0.012908585369586945,\n -0.020489605143666267,\n -0.028117710724473,\n -0.01844467967748642,\n -0.021027741953730583,\n 0.02234617993235588,\n -0.004634713754057884,\n 0.07496262341737747,\n -0.016278674826025963,\n -0.006239037495106459,\n -0.009074351750314236,\n 0.010049727745354176,\n 0.019467143341898918,\n 0.014193389564752579,\n -0.008072069846093655,\n -0.019561316817998886,\n 0.00862366147339344,\n -0.014314470812678337,\n 0.04251290112733841,\n 0.0033566358033567667,\n 0.03659338504076004,\n 0.0019103899830952287,\n -0.030108822509646416,\n -0.007305223494768143,\n 0.0018733929609879851,\n -0.024431465193629265,\n 0.01335927564650774,\n 0.006326484959572554,\n -0.04105992987751961,\n -0.03629740700125694,\n -0.0020953749772161245,\n 0.028924917802214622,\n 0.029785938560962677,\n 0.01069549284875393,\n -0.003615614725276828,\n -0.0005154352984391153,\n -0.02922089397907257,\n -0.021808043122291565,\n -0.0036324316170066595,\n 0.04243218153715134,\n -0.010480238124728203,\n -0.03156179562211037,\n 0.022709423676133156,\n 0.004443001933395863,\n -0.01286149863153696,\n -0.03826161101460457,\n 0.024660173803567886,\n -0.011004921980202198,\n -0.006393752060830593,\n 0.02114882320165634,\n 0.026906900107860565,\n -0.023462817072868347,\n -0.024135489016771317,\n 0.03446773812174797,\n 0.028036991134285927,\n 0.014341377653181553,\n -0.04700635373592377,\n 0.005378016736358404,\n -0.02914017252624035,\n 0.0093232411891222,\n -0.05881848558783531,\n -0.0029210804495960474,\n -0.029678311198949814,\n -0.060701966285705566,\n -0.006797355599701405,\n 0.002322401851415634,\n -0.034306298941373825,\n 0.0004843242058996111,\n -0.023651165887713432,\n 0.01073585357517004,\n -0.021310264244675636,\n -0.035005878657102585,\n 0.0028050444088876247,\n -0.01596924476325512,\n 0.03126581758260727,\n 0.018256332725286484,\n 0.0285482220351696,\n -0.01844467967748642,\n 0.013688885606825352,\n 0.02581717073917389,\n 0.0167495459318161,\n -0.0010073271114379168,\n -0.023826060816645622,\n -0.01404540240764618,\n 0.015054411254823208,\n -0.01493333000689745,\n -0.022978492081165314,\n 0.02494269609451294,\n 0.04407350346446037,\n 0.022938132286071777,\n -0.016655370593070984,\n 0.012807684950530529,\n 0.001075435196980834,\n 0.001704383990727365,\n -0.016386302188038826,\n -7.651649502804503e-05,\n 0.011771769262850285,\n 0.01046005729585886,\n -0.028575127944350243,\n -0.003598797833546996,\n 0.004406005144119263,\n -0.012377174571156502,\n 0.017704740166664124,\n -0.0015740536618977785,\n -0.017112787812948227,\n 0.021565880626440048,\n -0.01887519098818302,\n 0.030862214043736458,\n 0.00434210104867816,\n 0.05147290229797363,\n -0.020449243485927582,\n 0.006454292684793472,\n 0.011926483362913132,\n 0.0012721918756142259,\n -0.001787627232261002,\n 0.003323002252727747,\n 0.04606461524963379,\n -0.003995674662292004,\n 0.01133453194051981,\n 0.0022013208363205194,\n 0.0026419213972985744,\n 0.0064273858442902565,\n -0.04157116264104843,\n 0.022332727909088135,\n -0.042324554175138474,\n -0.018431227654218674,\n -0.006249127443879843,\n 0.009444322437047958,\n -0.024108583107590675,\n -0.0015706903068348765,\n 0.01404540240764618,\n -0.017812367528676987,\n 0.0015967563958838582,\n 0.011516153812408447,\n 0.022211646661162376,\n -0.04229764640331268,\n -0.024175850674510002,\n -0.046279869973659515,\n -0.01168432179838419,\n 0.005357836373150349,\n 0.005263662431389093,\n 0.044907618314027786,\n -0.01824287883937359,\n -0.032207559794187546,\n 0.010641679167747498,\n 0.003783782944083214,\n 0.004570809658616781,\n -0.04751758649945259,\n 0.02071831375360489,\n 0.04009127989411354,\n 0.004762521479278803,\n -0.026678191497921944,\n -0.014395191334187984,\n 0.008838917128741741,\n 0.006434112787246704,\n -0.008267145603895187,\n 0.021525520831346512,\n 0.03406413644552231,\n -0.012101378291845322,\n -0.012356993742287159,\n 0.005690809339284897,\n -0.03982221335172653,\n 0.006400479003787041,\n 0.0035483473911881447,\n 0.02304575964808464,\n -0.00011897894728463143,\n 0.02071831375360489,\n 0.008327685296535492,\n -0.018552307039499283,\n -0.014206843450665474,\n 0.046898726373910904,\n 0.0218484029173851,\n -0.023974047973752022,\n 0.014287563972175121,\n 0.03376815840601921,\n -0.003514713840559125,\n -0.018565760925412178,\n 0.0023139934055507183,\n -0.006820899434387684,\n -0.006615734193474054,\n 0.006568646989762783,\n 0.02922089397907257,\n 0.00862366147339344,\n -0.01687062717974186,\n -0.03522113338112831,\n -0.010668586008250713,\n 0.0003584083169698715,\n -0.0030942936427891254,\n 0.0010552549501881003,\n -0.0161710474640131,\n 0.02601897343993187,\n -0.008072069846093655,\n 0.021538974717259407,\n -0.02456600032746792,\n -0.0029093085322529078,\n 0.012942219153046608,\n -0.043454643338918686,\n -0.012854771688580513,\n 0.026207320392131805,\n -0.006733451969921589,\n -0.03209993243217468,\n 0.016063420102000237,\n -0.026032425463199615,\n -0.012195552699267864,\n -0.002974894130602479,\n -0.01949404925107956,\n -0.005391470156610012,\n 0.019655490294098854,\n 0.018485041335225105,\n 0.017139695584774017,\n 0.033283837139606476,\n -0.014731528237462044,\n -0.0006108707166276872,\n -0.012377174571156502,\n 0.0495356023311615,\n 0.050100646913051605,\n 0.0015606002416461706,\n -0.00031111104181036353,\n 0.001344504184089601,\n -0.02948996238410473,\n 0.020758673548698425,\n 0.04474617540836334,\n -0.05475554242730141,\n 0.02784864231944084,\n -0.006649367976933718,\n -0.007708827033638954,\n 0.022790145128965378,\n 0.04264743626117706,\n 0.010338976047933102,\n 0.006767085287719965,\n -0.036028340458869934,\n -0.026032425463199615,\n 0.01494678296148777,\n 0.02324756234884262,\n 0.01347362995147705,\n 0.008246964775025845,\n -0.014341377653181553,\n 0.003151470795273781,\n -0.0016581377713009715,\n -0.00967303104698658,\n 0.006259217858314514,\n -0.02124299854040146,\n -0.010675312951207161,\n 0.027202876284718513,\n 0.014879516325891018,\n 0.009269427508115768,\n 0.010675312951207161,\n -0.007937535643577576,\n 0.02121609076857567,\n 0.02779482863843441,\n 0.018135251477360725,\n -0.007567565888166428,\n -0.0042714704759418964,\n -0.002071831375360489,\n -0.006245764438062906,\n 0.0018363959388807416,\n -0.014650807715952396,\n -0.0521455742418766,\n 0.02922089397907257,\n 0.024485278874635696,\n 0.047975003719329834,\n 0.009081078693270683,\n 0.015592548996210098,\n 0.022238552570343018,\n -0.0061784968711435795,\n 0.006121319718658924,\n -0.01894245855510235,\n -0.04353536665439606,\n -0.016937894746661186,\n 0.0056975362822413445,\n -0.004089849069714546,\n -0.009121439419686794,\n -0.032853323966264725,\n 0.0556434690952301,\n 0.006935253739356995,\n -0.017435671761631966,\n 0.029086358845233917,\n 0.029624497517943382,\n -0.016036512330174446,\n 0.01809488981962204,\n 0.007897174917161465,\n -0.013453450053930283,\n -0.051580529659986496,\n 0.030512424185872078,\n 0.0027512304950505495,\n -0.031104376539587975,\n -0.03099674917757511,\n 0.03879975154995918,\n 0.0193729680031538,\n 0.00539819709956646,\n 0.06226256862282753,\n 0.00551255140453577,\n 0.017906542867422104,\n -0.004089849069714546,\n -0.015229305252432823,\n -0.0192249808460474,\n -0.023651165887713432,\n -0.002043242799118161,\n 0.0007563361432403326,\n 0.007587745785713196,\n -0.010830027051270008,\n 0.008246964775025845,\n 0.044127315282821655,\n -0.008919637650251389,\n -0.005472190678119659,\n 0.012404081411659718,\n -0.01666882447898388,\n -0.016426661983132362,\n -0.02474089525640011,\n -0.012195552699267864,\n -0.0016488884575664997,\n -0.004607806913554668,\n -0.01870029605925083,\n -0.013830146752297878,\n 0.009713390842080116,\n 0.015632908791303635,\n -0.0273912250995636,\n 0.0006550148827955127,\n 0.03656647726893425,\n -0.01140852551907301,\n 0.0023745340295135975,\n -0.017287682741880417,\n -0.035328760743141174,\n 0.025884438306093216,\n 0.04052179306745529,\n -0.006302941590547562,\n 0.023624258115887642,\n 0.02266906388103962,\n 0.02584407851099968,\n -0.005145944654941559,\n -0.005293932743370533,\n 0.001347026671282947,\n 0.01459699310362339,\n 0.006010328885167837,\n -0.016184501349925995,\n -0.014475912787020206,\n 0.007305223494768143,\n -0.006706545129418373,\n -0.02092011459171772,\n 0.03452155366539955,\n 0.03976839780807495,\n -0.003048888174816966,\n -0.025938251987099648,\n -0.011354711838066578,\n -0.02129681222140789,\n -0.0167495459318161,\n ...]",
    "crumbs": [
      "Embeddings"
    ]
  },
  {
    "objectID": "metric/ranking.html",
    "href": "metric/ranking.html",
    "title": "RankingMetric",
    "section": "",
    "text": "source\n\nRankingMetric\n\n RankingMetric (name:str,\n                prompt:str|ragas_experimental.prompt.base.Prompt,\n                llm:ragas_experimental.llm.llm.RagasLLM, num_ranks:int)\n\n\n\nExample usage\n\nfrom ragas_experimental.llm import ragas_llm\nfrom openai import OpenAI\n\nllm = ragas_llm(provider=\"openai\",model=\"gpt-4o\",client=OpenAI())\n\nmy_ranking_metric = RankingMetric(\n    name='response_ranking',\n    llm=llm,  # Your language model instance\n    prompt=\"Rank the following responses:\\n{candidates}\",\n    num_ranks=3,\n)\n\n# To score a single input (ranking candidate responses)\nresult = my_ranking_metric.score(candidates=[\n    \"short answer.\",\n    \"a bit more detailed.\",\n    \"the longest and most detailed answer.\"\n],n=3)\nprint(result)   # Might output something like: [1, 0, 2]\nprint(result.reason)  # Provides the reasoning behind the ranking\n\n[2, 1, 0]\nEnsemble ranking based on multiple evaluations.\nThe ranking is based on the length and detail of each response. 'the longest and most detailed answer.' is the most comprehensive, followed by 'a bit more detailed.', and 'short answer.' is the briefest.\nThe ranking is based on the length and detail of each response. The response 'the longest and most detailed answer.' is ranked highest (2) because it is the most detailed, followed by 'a bit more detailed.' (1), and finally 'short answer.' (0) as it is the least detailed.\nThe responses are ranked based on the level of detail and length. 'short answer.' is the least detailed, 'a bit more detailed.' provides more information, and 'the longest and most detailed answer.' offers the most comprehensive explanation.\n\n\n\n\nCustom ranking metric\n\nfrom ragas_experimental.metric import MetricResult\n\n@ranking_metric(\n    llm=llm,  # Your language model instance\n    prompt=\"Rank the following responses:\\n{candidates}\",\n    name='new_ranking_metric',\n    num_ranks=3\n)\ndef my_ranking_metric(llm, prompt, **kwargs):\n    # Your custom logic that calls the LLM and returns a tuple of (ranking, reason)\n    # For example, process the prompt (formatted with candidates) and produce a ranking.\n    ranking = [1, 0, 2]  # Dummy ranking: second candidate is best, then first, then third.\n    reason = \"Ranked based on response clarity and detail.\"\n    return MetricResult(result=ranking, reason=reason)\n\n# Using the decorator-based ranking metric:\nresult = my_ranking_metric.score(candidates=[\n    \"Response A: short answer.\",\n    \"Response B: a bit more detailed.\",\n    \"Response C: the longest and most detailed answer.\"\n])\nprint(result)   # E.g., [1, 0, 2]\nprint(result.reason)  # E.g., \"Ranked based on response clarity and detail.\"\n\n[1, 0, 2]\nRanked based on response clarity and detail.",
    "crumbs": [
      "Metric",
      "RankingMetric"
    ]
  },
  {
    "objectID": "metric/numeric.html",
    "href": "metric/numeric.html",
    "title": "Numeric Metric",
    "section": "",
    "text": "source\n\nNumericMetric\n\n NumericMetric (name:str,\n                prompt:str|ragas_experimental.prompt.base.Prompt,\n                llm:ragas_experimental.llm.llm.RagasLLM,\n                range:Tuple[float,float])\n\n\n\nExample usage\n\nfrom ragas_experimental.llm import ragas_llm\nfrom openai import OpenAI\n\nllm = ragas_llm(provider=\"openai\",model=\"gpt-4o\",client=OpenAI())\n\n\nmy_metric = NumericMetric(\n    name='helpfulness',\n    llm=llm,\n    prompt=\"Evaluate if given answer is helpful\\n\\n{response}\",\n    range=(0,10),\n)\n\nresult = my_metric.score(response=\"this is my response\")\nresult #gives \"low\"\nresult.reason #gives reasoning from llm\n\n\"The provided input lacks context or content to determine if it is helpful as it merely states 'this is my response' without any additional information.\"\n\n\n\n\nWrite custom numeric metric\n\nfrom ragas_experimental.metric import MetricResult\n\n@numeric_metric(llm=llm,\n    prompt=\"Evaluate if given answer is helpful\\n\\n{response}\",\n    name='new_metric',range=(0,10))\ndef my_metric(llm,prompt,**kwargs):\n\n        class response_model(BaseModel):\n             output: int\n             reason: str\n        \n        traces = {}\n        traces['input'] = kwargs\n        response = llm.generate(prompt.format(**kwargs),response_model=response_model)\n        traces['output'] = response.dict()\n        total = response.output\n        if total &lt; 1:\n            score = 0\n        else:\n            score = 10\n        return MetricResult(result=score,reason=response.reason,traces=traces)\n\nresult = my_metric.score(response='my response') # result\nresult # 10\nresult.reason # the reason for the answer\n\nresult1 = my_metric.score(response='my response 1') # result\nresult2 = my_metric.score(response='my response 2') # result\n\nresult1 + result2 # should be addable and behave like a float\n\n10",
    "crumbs": [
      "Metric",
      "Numeric Metric"
    ]
  },
  {
    "objectID": "metric/base.html",
    "href": "metric/base.html",
    "title": "BaseMetric",
    "section": "",
    "text": "source\n\nMetric\n\n Metric (name:str, prompt:str|ragas_experimental.prompt.base.Prompt,\n         llm:ragas_experimental.llm.llm.RagasLLM)\n\nBase class for all metrics in the LLM evaluation library.\n\n\nExample\n\nfrom ragas_experimental.llm import ragas_llm\nfrom openai import OpenAI\n\nllm = ragas_llm(provider=\"openai\",model=\"gpt-4o\",client=OpenAI())\n\n@dataclass\nclass CustomMetric(Metric):\n    values: t.List[str] = field(default_factory=lambda: [\"pass\", \"fail\"])\n    \n    def _get_response_model(self, with_reasoning: bool) -&gt; t.Type[BaseModel]:\n        \"\"\"Get or create a response model based on reasoning parameter.\"\"\"\n        \n        class mymodel(BaseModel):\n            result: int\n            reason: t.Optional[str] = None\n            \n        return mymodel \n\n    def _ensemble(self,results:t.List[MetricResult]) -&gt; MetricResult:\n        \n        return results[0]  # Placeholder for ensemble logic\n\nmy_metric = CustomMetric(name=\"example\", prompt=\"What is the result of {input}?\", llm=llm)\nmy_metric.score(input=\"test\")\n\n1",
    "crumbs": [
      "Metric",
      "BaseMetric"
    ]
  },
  {
    "objectID": "dataset.html",
    "href": "dataset.html",
    "title": "Dataset",
    "section": "",
    "text": "source\n\nDataset\n\n Dataset (name:str, model:Type[ragas_experimental.model.pydantic_model.Ext\n          endedPydanticBaseModel], project_id:str, dataset_id:str, ragas_a\n          pi_client:ragas_experimental.backends.ragas_api_client.RagasApiC\n          lient)\n\n*A list-like interface for managing dataset entries with backend synchronization.\nThis class behaves like a Python list while synchronizing operations with the Ragas backend API.*\n\n# test model\nclass TestModel(BaseModel):\n    id: int\n    name: str\n    description: str\n    tags: t.Literal[\"tag1\", \"tag2\", \"tag3\"]\n    result: MetricResult\n\n\nTestModel.__column_mapping__ = {}\n\n\ntest_model = TestModel(\n    id=0, \n    name=\"test\", \n    description=\"test description\", \n    result=MetricResult(result=0.5, reason=\"test reason\"), \n    tags=\"tag1\"\n)\ntest_model\n\nTestModel(id=0, name='test', description='test description', tags='tag1', result=0.5)\n\n\n\ntest_model.__column_mapping__\n\n{'id': 'id',\n 'name': 'name',\n 'description': 'description',\n 'tags': 'tags',\n 'result': 'result',\n 'result_reason': 'result_reason'}\n\n\n\nimport os\nfrom ragas_experimental import Project\n\n\nRAGAS_APP_TOKEN = \"api_key\"\nRAGAS_API_BASE_URL = \"https://api.dev.app.ragas.io\"\n\nos.environ[\"RAGAS_APP_TOKEN\"] = RAGAS_APP_TOKEN\nos.environ[\"RAGAS_API_BASE_URL\"] = RAGAS_API_BASE_URL\n\n\nragas_api_client = RagasApiClientFactory.create()\n\n\np = Project(project_id=\"3d9b529b-c23f-4e87-8a26-dd1923749aa7\", ragas_api_client=ragas_api_client)\ntest_dataset = p.create_dataset(name=\"TestModel_with_long_text\", model=TestModel)\ntest_dataset\n\nDataset(name=TestModel_with_long_text, model=TestModel, len=0)\n\n\n\n# https://dev.app.ragas.io/dashboard/projects/0a7c4ecb-b313-4bb0-81c0-852c9634ce03/datasets/a4f0d169-ebce-4a2b-b758-0ff49c0c4312\nTEST_PROJECT_ID = p.project_id\nTEST_DATASET_ID = test_dataset.dataset_id\ntest_project = await ragas_api_client.get_project(project_id=TEST_PROJECT_ID)\ntest_dataset = await ragas_api_client.get_dataset(project_id=TEST_PROJECT_ID, dataset_id=TEST_DATASET_ID)\ntest_dataset\n\n{'id': 'aa1fb420-4820-45a6-9502-6cfb7938b7a3',\n 'name': 'TestModel_with_long_text',\n 'description': None,\n 'created_at': '2025-04-16T18:54:04.355883+00:00',\n 'updated_at': '2025-04-16T18:54:04.355883+00:00',\n 'version_counter': 0,\n 'project_id': '3d9b529b-c23f-4e87-8a26-dd1923749aa7'}\n\n\n\ndataset = Dataset(\n    name=\"TestModel\", model=TestModel, project_id=TEST_PROJECT_ID, dataset_id=TEST_DATASET_ID, ragas_api_client=ragas_api_client\n)\n\n\nsource\n\n\nDataset.append\n\n Dataset.append (entry:~BaseModelType)\n\nAdd a new entry to the dataset and sync to Notion.\n\ndataset.append(test_model)\nlen(dataset)\n\n1\n\n\n\nsource\n\n\nDataset.pop\n\n Dataset.pop (index:int=-1)\n\nRemove and return entry at index, sync deletion to Notion.\n\ndataset.pop()\nlen(dataset)\n\n0\n\n\n\n# now add some more entries\nfor i in range(10):\n    dataset.append(test_model)\nlen(dataset)\n\n10\n\n\n\nsource\n\n\nDataset.load\n\n Dataset.load ()\n\nLoad all entries from the backend API.\n\ndataset.load()\n\n\nsource\n\n\nDataset.load_as_dicts\n\n Dataset.load_as_dicts ()\n\nLoad all entries as dictionaries.\n\ndataset.load_as_dicts()\n\n[{'description': 'test description',\n  'result': 0.5,\n  'result_reason': 'test reason',\n  'name': 'test',\n  'id': 0},\n {'description': 'test description',\n  'result': 0.5,\n  'result_reason': 'test reason',\n  'name': 'test',\n  'id': 0},\n {'description': 'test description',\n  'result': 0.5,\n  'result_reason': 'test reason',\n  'name': 'test',\n  'id': 0},\n {'description': 'test description',\n  'result': 0.5,\n  'result_reason': 'test reason',\n  'name': 'test',\n  'id': 0},\n {'description': 'test description',\n  'result': 0.5,\n  'result_reason': 'test reason',\n  'name': 'test',\n  'id': 0},\n {'description': 'test description',\n  'result': 0.5,\n  'result_reason': 'test reason',\n  'name': 'test',\n  'id': 0},\n {'description': 'test description',\n  'result': 0.5,\n  'result_reason': 'test reason',\n  'name': 'test',\n  'id': 0},\n {'description': 'test description',\n  'result': 0.5,\n  'result_reason': 'test reason',\n  'name': 'test',\n  'id': 0},\n {'description': 'test description',\n  'result': 0.5,\n  'result_reason': 'test reason',\n  'name': 'test',\n  'id': 0},\n {'description': 'test description',\n  'result': 0.5,\n  'result_reason': 'test reason',\n  'name': 'test',\n  'id': 0},\n {'description': 'test description',\n  'result': 0.5,\n  'result_reason': 'test reason',\n  'name': 'test',\n  'id': 0},\n {'description': 'test description',\n  'result': 0.5,\n  'result_reason': 'test reason',\n  'name': 'test',\n  'id': 0}]\n\n\n\nsource\n\n\nDataset.to_pandas\n\n Dataset.to_pandas ()\n\nConvert dataset to pandas DataFrame.\n\ndataset.to_pandas()\n\n\n\n\n\n\n\n\nid\nname\ndescription\nresult\n\n\n\n\n0\n0\ntest\ntest description\n0.5\n\n\n1\n0\ntest\ntest description\n0.5\n\n\n2\n0\ntest\ntest description\n0.5\n\n\n3\n0\ntest\ntest description\n0.5\n\n\n4\n0\ntest\ntest description\n0.5\n\n\n5\n0\ntest\ntest description\n0.5\n\n\n6\n0\ntest\ntest description\n0.5\n\n\n7\n0\ntest\ntest description\n0.5\n\n\n8\n0\ntest\ntest description\n0.5\n\n\n9\n0\ntest\ntest description\n0.5\n\n\n10\n0\ntest\ntest description\n0.5\n\n\n11\n0\ntest\ntest description\n0.5\n\n\n\n\n\n\n\n\nsource\n\n\nDataset.save\n\n Dataset.save (item:~BaseModelType)\n\nSave changes to an item to the backend.\n\nd = dataset[0]\nd\n\nTestModel(id=0, name='updated name', description='test description', result=0.5)\n\n\n\nd.name = \"updated name\"\ndataset.save(d)\ndataset[0].name\n\n'updated name'\n\n\n\ndataset.load_as_dicts()\n\n[{'description': 'test description',\n  'result': 0.5,\n  'result_reason': 'test reason',\n  'name': 'test',\n  'id': 0},\n {'description': 'test description',\n  'result': 0.5,\n  'result_reason': 'test reason',\n  'name': 'test',\n  'id': 0},\n {'description': 'test description',\n  'result': 0.5,\n  'result_reason': 'test reason',\n  'name': 'test',\n  'id': 0},\n {'description': 'test description',\n  'result': 0.5,\n  'result_reason': 'test reason',\n  'name': 'test',\n  'id': 0},\n {'description': 'test description',\n  'result': 0.5,\n  'result_reason': 'test reason',\n  'name': 'test',\n  'id': 0},\n {'description': 'test description',\n  'result': 0.5,\n  'result_reason': 'test reason',\n  'name': 'test',\n  'id': 0},\n {'description': 'test description',\n  'result': 0.5,\n  'result_reason': 'test reason',\n  'name': 'test',\n  'id': 0},\n {'description': 'test description',\n  'result': 0.5,\n  'result_reason': 'test reason',\n  'name': 'test',\n  'id': 0},\n {'description': 'test description',\n  'result': 0.5,\n  'result_reason': 'test reason',\n  'name': 'test',\n  'id': 0},\n {'description': 'test description',\n  'result': 0.5,\n  'result_reason': 'test reason',\n  'name': 'test',\n  'id': 0},\n {'description': 'test description',\n  'result': 0.5,\n  'result_reason': 'test reason',\n  'name': 'test',\n  'id': 0},\n {'description': 'test description',\n  'result': 0.5,\n  'result_reason': 'test reason',\n  'name': 'updated name',\n  'id': 0}]\n\n\n\nsource\n\n\nDataset.get\n\n Dataset.get (field_value:str, field_name:str='_row_id')\n\n*Get an entry by field value.\nArgs: id_value: The value to match field_name: The field to match against (default: “id”)\nReturns: The matching model instance or None if not found*\n\nd._row_id\n\n'eVpgxsmPGwa8'\n\n\n\ntest_model = dataset.get(d._row_id)\ntest_model\n\nTestModel(id=0, name='updated name', description='test description', result=0.5)",
    "crumbs": [
      "Dataset"
    ]
  },
  {
    "objectID": "tracing/mlflow.html",
    "href": "tracing/mlflow.html",
    "title": "MLflow tracing",
    "section": "",
    "text": "source\n\nMLflowTrace\n\n MLflowTrace (trace:mlflow.entities.trace.Trace)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nsync_trace\n\n sync_trace ()"
  },
  {
    "objectID": "prompt/dynamic_few_shot.html",
    "href": "prompt/dynamic_few_shot.html",
    "title": "Dynamic Few-Shot Learning",
    "section": "",
    "text": "/opt/hostedtoolcache/Python/3.10.17/x64/lib/python3.10/site-packages/fastcore/docscrape.py:230: UserWarning: Unknown section Parameters:\n  else: warn(msg)\n\nsource\n\nDynamicFewShotPrompt\n\n DynamicFewShotPrompt (prompt:ragas_experimental.prompt.base.Prompt,\n                       example_store:__main__.InMemoryExampleStore,\n                       num_examples:int=3)\n\nCreate a simple prompt object.\n\nsource\n\n\nInMemoryExampleStore\n\n InMemoryExampleStore (embedding_model=None)\n\nHelper class that provides a standard way to create an ABC using inheritance.\n\nsource\n\n\nExampleStore\n\n ExampleStore ()\n\nHelper class that provides a standard way to create an ABC using inheritance.\n\n\nExample Usage\n\nfrom ragas_experimental.embedding import ragas_embedding\nfrom ragas_experimental.prompt import Prompt\nfrom openai import OpenAI\n\nembedding = ragas_embedding(provider=\"openai\", client=OpenAI(),model=\"text-embedding-3-small\")\n\n# Create a basic prompt\nprompt = Prompt(\n    instruction=\"Evaluate if given answer {response} is same as expected answer {expected_answer}\"\n)\n\n# Add examples with dict inputs and dict outputs\nprompt.add_example(\n    {\n        \"response\": \"You can get a full refund if you miss your flight.\",\n        \"expected_answer\": \"Refunds depend on ticket type; only refundable tickets qualify for full refunds.\"\n    },\n    {\"score\": \"fail\"}\n)\n\nprompt = DynamicFewShotPrompt.from_prompt(\n    prompt,\n    embedding_model=embedding,\n    num_examples=1\n)\n\nprompt.add_example(\n    {\n        \"response\": \"Bananas are high in potassium and great for quick energy.\",\n        \"expected_answer\": \"Bananas provide potassium and are a good source of fast-digesting carbohydrates.\"\n    },\n    {\"score\": \"pass\"}\n)\n\nprompt.add_example(\n    {\n        \"response\": \"Using two-factor authentication greatly enhances account security.\",\n        \"expected_answer\": \"Two-factor authentication adds a layer of protection by requiring a second form of identity verification.\"\n    },\n    {\"score\": \"fail\"}\n)\n\n\nprompt.example_store.get_examples(\n{\n        \"response\": \"Regularly updating your software reduces the risk of vulnerabilities.\",\n        \"expected_answer\": \"Keeping software up to date helps patch known security flaws and prevents exploits.\"\n    })\n\nprint(prompt.format(**{\n        \"response\": \"Regularly updating your software reduces the risk of vulnerabilities.\",\n        \"expected_answer\": \"Keeping software up to date helps patch known security flaws and prevents exploits.\"\n    }))\n\nEvaluate if given answer Regularly updating your software reduces the risk of vulnerabilities. is same as expected answer Keeping software up to date helps patch known security flaws and prevents exploits.\n\nExamples:\n\nExample 1:\nInput:\nresponse: Using two-factor authentication greatly enhances account security.\nexpected_answer: Two-factor authentication adds a layer of protection by requiring a second form of identity verification.\nOutput:\nscore: fail",
    "crumbs": [
      "Prompt",
      "Dynamic Few-Shot Learning"
    ]
  },
  {
    "objectID": "backends/factory.html",
    "href": "backends/factory.html",
    "title": "Backend Factory",
    "section": "",
    "text": "source\n\nRagasApiClientFactory\n\n RagasApiClientFactory ()\n\nFactory for creating Ragas API client instances.",
    "crumbs": [
      "Backends",
      "Backend Factory"
    ]
  },
  {
    "objectID": "model/pydantic_mode.html",
    "href": "model/pydantic_mode.html",
    "title": "Ragas BaseModel",
    "section": "",
    "text": "source\n\nExtendedPydanticBaseModel\n\n ExtendedPydanticBaseModel ()\n\nExtended Pydantic BaseModel with database integration capabilities\n\nimport ragas_experimental.typing as rt\nfrom ragas_experimental.metric.result import MetricResult\n\n\n# Example usage\nclass TestDataRow(ExtendedPydanticBaseModel):\n    id: t.Optional[int] = None\n    query: t.Annotated[str, rt.Text(id=\"search_query\")]\n    persona: t.List[t.Literal[\"opt1\", \"opt2\", \"opt3\"]]\n    result: MetricResult\n\n\nTestDataRow.__column_mapping__ = {}\n\n\ntest_data_row = TestDataRow(id=1, query=\"this is a test\", persona=[\"opt1\"], result=MetricResult(result=0.5, reason=\"test reason\"))\ntest_data_row\n\nTestDataRow(id=1, query='this is a test', persona=['opt1'], result=0.5)\n\n\n\ntest_data_row.__column_mapping__\n\n{'id': 'id',\n 'query': 'search_query',\n 'persona': 'persona',\n 'result': 'result',\n 'result_reason': 'result_reason'}",
    "crumbs": [
      "Ragas `BaseModel`"
    ]
  },
  {
    "objectID": "backends/ragas_api_client.html",
    "href": "backends/ragas_api_client.html",
    "title": "Ragas API Client",
    "section": "",
    "text": "RAGAS_APP_TOKEN = \"api_key\"\nRAGAS_API_ENDPOINT = \"https://api.dev.app.ragas.io\"\n\n\nsource\n\nRagasApiClient\n\n RagasApiClient (base_url:str, app_token:Optional[str]=None)\n\nClient for the Ragas Relay API.\n\n\nProjects\n\nsource\n\n\nRagasApiClient.delete_project\n\n RagasApiClient.delete_project (project_id:str)\n\nDelete a project.\n\nsource\n\n\nRagasApiClient.update_project\n\n RagasApiClient.update_project (project_id:str, title:Optional[str]=None,\n                                description:Optional[str]=None)\n\nUpdate an existing project.\n\nsource\n\n\nRagasApiClient.create_project\n\n RagasApiClient.create_project (title:str, description:Optional[str]=None)\n\nCreate a new project.\n\nsource\n\n\nRagasApiClient.get_project\n\n RagasApiClient.get_project (project_id:str)\n\nGet a specific project by ID.\n\nsource\n\n\nRagasApiClient.list_projects\n\n RagasApiClient.list_projects (ids:Optional[List[str]]=None, limit:int=50,\n                               offset:int=0, order_by:Optional[str]=None,\n                               sort_dir:Optional[str]=None)\n\nList projects.\n\n# Initialize client with your authentication token\nclient = RagasApiClient(base_url=RAGAS_API_ENDPOINT, app_token=RAGAS_APP_TOKEN)\n\n# List projects\ntry:\n    projects = await client.list_projects(limit=10)\n    print(f\"Found {len(projects)} projects:\")\n    for project in projects:\n        print(f\"- {project['title']} (ID: {project['id']})\")\nexcept Exception as e:\n    print(f\"Error: {e}\")\n\nFound 2 projects:\nError: string indices must be integers, not 'str'\n\n\n\nawait client.create_project(\"test project\", \"test description\")\n\n{'id': '26b0e577-8ff8-4014-bc7a-cfc410df3488',\n 'title': 'test project',\n 'description': 'test description',\n 'created_at': '2025-04-10T00:12:34.606398+00:00',\n 'updated_at': '2025-04-10T00:12:34.606398+00:00'}\n\n\n\nawait client.list_projects()\n\n{'items': [{'id': '1ef0843b-231f-4a2c-b64d-d39bcee9d830',\n   'title': 'yann-lecun-wisdom',\n   'description': 'Yann LeCun Wisdom',\n   'created_at': '2025-04-15T03:27:08.962384+00:00',\n   'updated_at': '2025-04-15T03:27:08.962384+00:00'},\n  {'id': 'c2d788ec-a602-495b-8ddc-f457ce11b414',\n   'title': 'Demo Project',\n   'description': None,\n   'created_at': '2025-04-12T19:47:10.928422+00:00',\n   'updated_at': '2025-04-12T19:47:10.928422+00:00'},\n  {'id': '0d465f02-c88f-454e-9ff3-780a001e3e21',\n   'title': 'test project',\n   'description': 'test description',\n   'created_at': '2025-04-12T19:46:36.221385+00:00',\n   'updated_at': '2025-04-12T19:46:36.221385+00:00'},\n  {'id': '2ae1434c-e700-44a7-9528-7c2f03cfb491',\n   'title': 'Demo Project',\n   'description': None,\n   'created_at': '2025-04-12T19:46:36.157122+00:00',\n   'updated_at': '2025-04-12T19:46:36.157122+00:00'},\n  {'id': 'adb45ec6-6902-4339-b05f-3b86fd256c7e',\n   'title': 'Demo Project',\n   'description': None,\n   'created_at': '2025-04-12T19:45:54.430913+00:00',\n   'updated_at': '2025-04-12T19:45:54.430913+00:00'},\n  {'id': '6f26bf5b-af4d-48b5-af2d-13d3e671bbbf',\n   'title': 'Demo Project',\n   'description': None,\n   'created_at': '2025-04-11T00:56:30.085249+00:00',\n   'updated_at': '2025-04-11T00:56:30.085249+00:00'},\n  {'id': '63e4fc0f-1a60-441b-bd71-f21ce8e35c7e',\n   'title': 'Demo Project',\n   'description': None,\n   'created_at': '2025-04-11T00:44:56.031721+00:00',\n   'updated_at': '2025-04-11T00:44:56.031721+00:00'},\n  {'id': 'db0bedd6-6cfa-4551-b1ab-af78fa82dca7',\n   'title': 'Demo Project',\n   'description': None,\n   'created_at': '2025-04-11T00:44:17.601598+00:00',\n   'updated_at': '2025-04-11T00:44:17.601598+00:00'},\n  {'id': '80c8ef9a-23d7-4a9f-a7d7-36c6472ab51e',\n   'title': 'Demo Project',\n   'description': None,\n   'created_at': '2025-04-11T00:42:37.287184+00:00',\n   'updated_at': '2025-04-11T00:42:37.287184+00:00'},\n  {'id': 'ae2a5a5c-3902-4ef6-af50-f2d8f27feea6',\n   'title': 'Demo Project',\n   'description': None,\n   'created_at': '2025-04-11T00:40:53.71528+00:00',\n   'updated_at': '2025-04-11T00:40:53.71528+00:00'},\n  {'id': '96618f8b-d3a1-4998-9a66-155f8f254512',\n   'title': 'Demo Project',\n   'description': None,\n   'created_at': '2025-04-11T00:31:21.410658+00:00',\n   'updated_at': '2025-04-11T00:31:21.410658+00:00'},\n  {'id': '4515aa23-cb4c-4c0a-b833-fefd0a30fdcc',\n   'title': 'Demo Project',\n   'description': None,\n   'created_at': '2025-04-11T00:27:49.977435+00:00',\n   'updated_at': '2025-04-11T00:27:49.977435+00:00'},\n  {'id': '138098a4-651e-4dca-b226-d70956b3e039',\n   'title': 'Demo Project',\n   'description': None,\n   'created_at': '2025-04-11T00:24:03.39505+00:00',\n   'updated_at': '2025-04-11T00:24:03.39505+00:00'},\n  {'id': 'bbe45632-3268-43a6-9694-b020b3f5226f',\n   'title': 'Demo Project',\n   'description': None,\n   'created_at': '2025-04-10T22:41:14.663646+00:00',\n   'updated_at': '2025-04-10T22:41:14.663646+00:00'},\n  {'id': 'df764139-bac7-4aec-af24-5c6886189f84',\n   'title': 'SuperMe-Demo',\n   'description': 'SuperMe demo to show the team',\n   'created_at': '2025-04-10T04:35:18.631257+00:00',\n   'updated_at': '2025-04-10T04:35:18.631257+00:00'},\n  {'id': 'a6ccabe0-7b8d-4866-98af-f167a36b94ff',\n   'title': 'SuperMe',\n   'description': 'SuperMe demo to show the team',\n   'created_at': '2025-04-10T03:10:29.153622+00:00',\n   'updated_at': '2025-04-10T03:10:29.153622+00:00'}],\n 'pagination': {'offset': 0,\n  'limit': 50,\n  'total': 16,\n  'order_by': 'created_at',\n  'sort_dir': 'desc'}}\n\n\n\nTEST_PROJECT_ID = \"a6ccabe0-7b8d-4866-98af-f167a36b94ff\"\nproject = await client.get_project(TEST_PROJECT_ID)\n\n\nsource\n\n\nRagasApiClient.get_project_by_name\n\n RagasApiClient.get_project_by_name (project_name:str)\n\n*Get a project by its name.\nArgs: project_name: Name of the project to find\nReturns: The project information dictionary\nRaises: ProjectNotFoundError: If no project with the given name is found DuplicateProjectError: If multiple projects with the given name are found*\n\nawait client.get_project_by_name(\"SuperMe\")\n\n{'id': 'a6ccabe0-7b8d-4866-98af-f167a36b94ff',\n 'title': 'SuperMe',\n 'description': 'SuperMe demo to show the team',\n 'created_at': '2025-04-10T03:10:29.153622+00:00',\n 'updated_at': '2025-04-10T03:10:29.153622+00:00'}\n\n\n\n\nDatasets\n\nsource\n\n\nRagasApiClient.delete_dataset\n\n RagasApiClient.delete_dataset (project_id:str, dataset_id:str)\n\nDelete a dataset.\n\nsource\n\n\nRagasApiClient.update_dataset\n\n RagasApiClient.update_dataset (project_id:str, dataset_id:str,\n                                name:Optional[str]=None,\n                                description:Optional[str]=None)\n\nUpdate an existing dataset.\n\nsource\n\n\nRagasApiClient.create_dataset\n\n RagasApiClient.create_dataset (project_id:str, name:str,\n                                description:Optional[str]=None)\n\nCreate a new dataset in a project.\n\nsource\n\n\nRagasApiClient.get_dataset\n\n RagasApiClient.get_dataset (project_id:str, dataset_id:str)\n\nGet a specific dataset.\n\nsource\n\n\nRagasApiClient.list_datasets\n\n RagasApiClient.list_datasets (project_id:str, limit:int=50, offset:int=0,\n                               order_by:Optional[str]=None,\n                               sort_dir:Optional[str]=None)\n\nList datasets in a project.\n\n# check project ID\nprojects = await client.list_projects()\nprojects[\"items\"][0][\"id\"], TEST_PROJECT_ID\n\n('1ef0843b-231f-4a2c-b64d-d39bcee9d830',\n 'a6ccabe0-7b8d-4866-98af-f167a36b94ff')\n\n\n\n# Create a new dataset\nnew_dataset = await client.create_dataset(\n    projects[\"items\"][0][\"id\"], \"New Dataset\", \"This is a new dataset\"\n)\nprint(f\"New dataset created: {new_dataset}\")\n\nNew dataset created: {'id': '2382037f-906c-45a0-9b9f-702d32903efd', 'name': 'New Dataset', 'description': 'This is a new dataset', 'updated_at': '2025-04-16T03:52:01.91574+00:00', 'created_at': '2025-04-16T03:52:01.91574+00:00', 'version_counter': 0, 'project_id': '1ef0843b-231f-4a2c-b64d-d39bcee9d830'}\n\n\n\n# List datasets in the project\ndatasets = await client.list_datasets(projects[\"items\"][0][\"id\"])\nprint(f\"Found {len(datasets)} datasets\")\n\nFound 2 datasets\n\n\n\nupdated_dataset = await client.update_dataset(\n    projects[\"items\"][0][\"id\"],\n    datasets[\"items\"][0][\"id\"],\n    \"Updated Dataset\",\n    \"This is an updated dataset\",\n)\nprint(f\"Updated dataset: {updated_dataset}\")\n\nUpdated dataset: {'id': '8572180f-fddf-46c5-b943-e6ff6448eb01', 'name': 'Updated Dataset', 'description': 'This is an updated dataset', 'created_at': '2025-04-15T03:28:09.050125+00:00', 'updated_at': '2025-04-16T03:52:09.627448+00:00', 'version_counter': 0, 'project_id': '1ef0843b-231f-4a2c-b64d-d39bcee9d830'}\n\n\n\n# Delete the dataset\nawait client.delete_dataset(projects[\"items\"][0][\"id\"], datasets[\"items\"][0][\"id\"])\nprint(\"Dataset deleted\")\n\nDataset deleted\n\n\nFor the time being I’ve also added another option to get the dataset by name too\n\nsource\n\n\nRagasApiClient.get_dataset_by_name\n\n RagasApiClient.get_dataset_by_name (project_id:str, dataset_name:str)\n\n*Get a dataset by its name.\nArgs: project_id: ID of the project dataset_name: Name of the dataset to find\nReturns: The dataset information dictionary\nRaises: DatasetNotFoundError: If no dataset with the given name is found DuplicateDatasetError: If multiple datasets with the given name are found*\n\nawait client.get_dataset_by_name(project_id=TEST_PROJECT_ID, dataset_name=\"test\")\n\n\n---------------------------------------------------------------------------\nDuplicateDatasetError                     Traceback (most recent call last)\nCell In[19], line 1\n----&gt; 1 await client.get_dataset_by_name(project_id=TEST_PROJECT_ID, dataset_name=\"test\")\n\nCell In[18], line 18, in get_dataset_by_name(self, project_id, dataset_name)\n      1 @patch\n      2 async def get_dataset_by_name(\n      3     self: RagasApiClient, project_id: str, dataset_name: str\n      4 ) -&gt; t.Dict:\n      5     \"\"\"Get a dataset by its name.\n      6 \n      7     Args:\n   (...)     16         DuplicateDatasetError: If multiple datasets with the given name are found\n     17     \"\"\"\n---&gt; 18     return await self._get_resource_by_name(\n     19         list_method=self.list_datasets,\n     20         get_method=self.get_dataset,\n     21         resource_name=dataset_name,\n     22         name_field=\"name\",\n     23         not_found_error=DatasetNotFoundError,\n     24         duplicate_error=DuplicateDatasetError,\n     25         resource_type_name=\"dataset\",\n     26         project_id=project_id\n     27     )\n\nCell In[12], line 76, in _get_resource_by_name(self, list_method, get_method, resource_name, name_field, not_found_error, duplicate_error, resource_type_name, **list_method_kwargs)\n     73     context = list_method_kwargs.get(\"project_id\", \"\")\n     74     context_msg = f\" in project {context}\" if context else \"\"\n---&gt; 76     raise duplicate_error(\n     77         f\"Multiple {resource_type_name}s found with name '{resource_name}'{context_msg}. \"\n     78         f\"{resource_type_name.capitalize()} IDs: {', '.join(resource_ids)}. \"\n     79         f\"Please use get_{resource_type_name}() with a specific ID instead.\"\n     80     )\n     82 # Exactly one match found - retrieve full details\n     83 if \"project_id\" in list_method_kwargs:\n\nDuplicateDatasetError: Multiple datasets found with name 'test' in project a6ccabe0-7b8d-4866-98af-f167a36b94ff. Dataset IDs: 9a48d5d1-531f-424f-b2d2-d8f9bcaeec1e, 483477a4-3d00-4010-a253-c92dee3bc092. Please use get_dataset() with a specific ID instead.\n\n\n\n\n\nExperiments\n\nsource\n\n\nRagasApiClient.delete_experiment\n\n RagasApiClient.delete_experiment (project_id:str, experiment_id:str)\n\nDelete an experiment.\n\nsource\n\n\nRagasApiClient.update_experiment\n\n RagasApiClient.update_experiment (project_id:str, experiment_id:str,\n                                   name:Optional[str]=None,\n                                   description:Optional[str]=None)\n\nUpdate an existing experiment.\n\nsource\n\n\nRagasApiClient.create_experiment\n\n RagasApiClient.create_experiment (project_id:str, name:str,\n                                   description:Optional[str]=None)\n\nCreate a new experiment in a project.\n\nsource\n\n\nRagasApiClient.get_experiment\n\n RagasApiClient.get_experiment (project_id:str, experiment_id:str)\n\nGet a specific experiment.\n\nsource\n\n\nRagasApiClient.list_experiments\n\n RagasApiClient.list_experiments (project_id:str, limit:int=50,\n                                  offset:int=0,\n                                  order_by:Optional[str]=None,\n                                  sort_dir:Optional[str]=None)\n\nList experiments in a project.\n\n# create a new experiment\nnew_experiment = await client.create_experiment(\n    projects[\"items\"][0][\"id\"], \"New Experiment\", \"This is a new experiment\"\n)\nprint(f\"New experiment created: {new_experiment}\")\n# list experiments\nexperiments = await client.list_experiments(projects[\"items\"][0][\"id\"])\nprint(f\"Found {len(experiments)} experiments\")\n# get a specific experiment\nexperiment = await client.get_experiment(\n    projects[\"items\"][0][\"id\"], experiments[\"items\"][0][\"id\"]\n)\nprint(f\"Experiment: {experiment}\")\n# update an experiment\nupdated_experiment = await client.update_experiment(\n    projects[\"items\"][0][\"id\"],\n    experiments[\"items\"][0][\"id\"],\n    \"Updated Experiment\",\n    \"This is an updated experiment\",\n)\nprint(f\"Updated experiment: {updated_experiment}\")\n# delete an experiment\nawait client.delete_experiment(projects[\"items\"][0][\"id\"], experiments[\"items\"][0][\"id\"])\nprint(\"Experiment deleted\")\n\nNew experiment created: {'id': 'b575c5d1-6934-45c0-b67a-fc9a4d7bdba3', 'name': 'New Experiment', 'description': 'This is a new experiment', 'updated_at': '2025-04-10T00:12:39.955229+00:00', 'created_at': '2025-04-10T00:12:39.955229+00:00', 'version_counter': 0, 'project_id': '26b0e577-8ff8-4014-bc7a-cfc410df3488'}\nFound 2 experiments\nExperiment: {'id': 'b575c5d1-6934-45c0-b67a-fc9a4d7bdba3', 'name': 'New Experiment', 'description': 'This is a new experiment', 'created_at': '2025-04-10T00:12:39.955229+00:00', 'updated_at': '2025-04-10T00:12:39.955229+00:00', 'version_counter': 0, 'project_id': '26b0e577-8ff8-4014-bc7a-cfc410df3488'}\nUpdated experiment: {'id': 'b575c5d1-6934-45c0-b67a-fc9a4d7bdba3', 'name': 'Updated Experiment', 'description': 'This is an updated experiment', 'created_at': '2025-04-10T00:12:39.955229+00:00', 'updated_at': '2025-04-10T00:12:41.676216+00:00', 'version_counter': 0, 'project_id': '26b0e577-8ff8-4014-bc7a-cfc410df3488'}\nExperiment deleted\n\n\n\nawait client.list_experiments(TEST_PROJECT_ID)\n\n{'items': [{'id': '78fd6c58-7edf-4239-93d1-4f49185d8e49',\n   'name': 'New Experiment',\n   'description': 'This is a new experiment',\n   'created_at': '2025-03-30T06:31:31.689269+00:00',\n   'updated_at': '2025-03-30T06:31:31.689269+00:00',\n   'project_id': 'e1b3f1e4-d344-48f4-a178-84e7e32e6ab6'},\n  {'id': '7c695b58-7fc3-464c-a18b-a96e35f9684d',\n   'name': 'New Experiment',\n   'description': 'This is a new experiment',\n   'created_at': '2025-04-09T17:03:44.340782+00:00',\n   'updated_at': '2025-04-09T17:03:44.340782+00:00',\n   'project_id': 'e1b3f1e4-d344-48f4-a178-84e7e32e6ab6'}],\n 'pagination': {'offset': 0,\n  'limit': 50,\n  'total': 2,\n  'order_by': 'created_at',\n  'sort_dir': 'asc'}}\n\n\n\nsource\n\n\nRagasApiClient.get_experiment_by_name\n\n RagasApiClient.get_experiment_by_name (project_id:str,\n                                        experiment_name:str)\n\n*Get an experiment by its name.\nArgs: project_id: ID of the project containing the experiment experiment_name: Name of the experiment to find\nReturns: The experiment information dictionary\nRaises: ExperimentNotFoundError: If no experiment with the given name is found DuplicateExperimentError: If multiple experiments with the given name are found*\n\nawait client.get_experiment_by_name(TEST_PROJECT_ID, \"test\")\n\n\n---------------------------------------------------------------------------\nDuplicateExperimentError                  Traceback (most recent call last)\nCell In[23], line 1\n----&gt; 1 await client.get_experiment_by_name(TEST_PROJECT_ID, \"test\")\n\nCell In[22], line 19, in get_experiment_by_name(self, project_id, experiment_name)\n      2 @patch\n      3 async def get_experiment_by_name(\n      4     self: RagasApiClient, project_id: str, experiment_name: str\n      5 ) -&gt; t.Dict:\n      6     \"\"\"Get an experiment by its name.\n      7 \n      8     Args:\n   (...)     17         DuplicateExperimentError: If multiple experiments with the given name are found\n     18     \"\"\"\n---&gt; 19     return await self._get_resource_by_name(\n     20         list_method=self.list_experiments,\n     21         get_method=self.get_experiment,\n     22         resource_name=experiment_name,\n     23         name_field=\"name\",\n     24         not_found_error=ExperimentNotFoundError,\n     25         duplicate_error=DuplicateExperimentError,\n     26         resource_type_name=\"experiment\",\n     27         project_id=project_id\n     28     )\n\nCell In[12], line 76, in _get_resource_by_name(self, list_method, get_method, resource_name, name_field, not_found_error, duplicate_error, resource_type_name, **list_method_kwargs)\n     73     context = list_method_kwargs.get(\"project_id\", \"\")\n     74     context_msg = f\" in project {context}\" if context else \"\"\n---&gt; 76     raise duplicate_error(\n     77         f\"Multiple {resource_type_name}s found with name '{resource_name}'{context_msg}. \"\n     78         f\"{resource_type_name.capitalize()} IDs: {', '.join(resource_ids)}. \"\n     79         f\"Please use get_{resource_type_name}() with a specific ID instead.\"\n     80     )\n     82 # Exactly one match found - retrieve full details\n     83 if \"project_id\" in list_method_kwargs:\n\nDuplicateExperimentError: Multiple experiments found with name 'test' in project a6ccabe0-7b8d-4866-98af-f167a36b94ff. Experiment IDs: e1ae15aa-2e0e-40dd-902a-0f0e0fd4df69, 52428c79-afdf-468e-82dc-6ef82c5b71d2, 55e14ac3-0037-4909-898f-eee9533a6d3f, 9adfa008-b479-41cf-ba28-c860e01401ea, 233d28c8-6556-49c5-b146-1e001720c214, 6aed5143-3f60-4bf2-bcf2-ecfdb950e992. Please use get_experiment() with a specific ID instead.\n\n\n\n\n\nColumns (for datasets)\n\nsource\n\n\nRagasApiClient.delete_dataset_column\n\n RagasApiClient.delete_dataset_column (project_id:str, dataset_id:str,\n                                       column_id:str)\n\nDelete a column from a dataset.\n\nsource\n\n\nRagasApiClient.update_dataset_column\n\n RagasApiClient.update_dataset_column (project_id:str, dataset_id:str,\n                                       column_id:str, **column_data)\n\nUpdate an existing column in a dataset.\n\nsource\n\n\nRagasApiClient.create_dataset_column\n\n RagasApiClient.create_dataset_column (project_id:str, dataset_id:str,\n                                       id:str, name:str, type:str,\n                                       col_order:Optional[int]=None,\n                                       settings:Optional[Dict]=None)\n\nCreate a new column in a dataset.\n\nsource\n\n\nRagasApiClient.get_dataset_column\n\n RagasApiClient.get_dataset_column (project_id:str, dataset_id:str,\n                                    column_id:str)\n\nGet a specific column in a dataset.\n\nsource\n\n\nRagasApiClient.list_dataset_columns\n\n RagasApiClient.list_dataset_columns (project_id:str, dataset_id:str,\n                                      limit:int=50, offset:int=0,\n                                      order_by:Optional[str]=None,\n                                      sort_dir:Optional[str]=None)\n\nList columns in a dataset.\n\ndatasets = await client.create_dataset(\n    projects[\"items\"][0][\"id\"],\n    \"New Dataset for testing columns\",\n    \"This is a new dataset for testing columns\",\n)\ndatasets\n\n{'id': 'cc6794e1-3505-4d5c-b403-ca7e55142bbc',\n 'name': 'New Dataset for testing columns',\n 'description': 'This is a new dataset for testing columns',\n 'updated_at': '2025-04-16T18:05:53.249101+00:00',\n 'created_at': '2025-04-16T18:05:53.249101+00:00',\n 'version_counter': 0,\n 'project_id': '3d9b529b-c23f-4e87-8a26-dd1923749aa7'}\n\n\n\n# add a new column to the dataset\nnew_column = await client.create_dataset_column(\n    project_id=projects[\"items\"][0][\"id\"],\n    dataset_id=datasets[\"id\"],\n    id=\"new_column_5\",\n    name=\"New Column 3\",\n    type=ColumnType.SELECT.value,\n    settings={\n        \"width\": 255,\n        \"isVisible\": True,\n        \"isEditable\": True,\n        \"options\": [\n            {\"name\": \"name\", \"color\": \"hsl(200, 100%, 50%)\", \"value\": \"name\"},\n            {\"name\": \"age\", \"color\": \"hsl(200, 100%, 50%)\", \"value\": \"age\"},\n            {\"name\": \"gender\", \"color\": \"hsl(200, 100%, 50%)\", \"value\": \"gender\"},\n        ]\n    },\n)\nnew_column\n\n{'id': 'new_column_5',\n 'name': 'New Column 5',\n 'type': 'select',\n 'settings': {'id': 'new_column_5',\n  'name': 'New Column 5',\n  'type': 'select',\n  'width': 255,\n  'options': [{'name': 'name', 'value': 'name'},\n   {'name': 'age', 'value': 'age'},\n   {'name': 'gender', 'value': 'gender'}],\n  'isVisible': True,\n  'isEditable': True},\n 'created_at': '2025-04-16T18:11:14.305975+00:00',\n 'updated_at': '2025-04-16T18:11:14.305975+00:00',\n 'datatable_id': 'cc6794e1-3505-4d5c-b403-ca7e55142bbc'}\n\n\n\nawait client.list_dataset_columns(projects[\"items\"][0][\"id\"], \"271b8bc7-2d04-43b8-8960-ce20365f546b\")\n\n{'items': [{'id': 'dQ7hCb1AUfog',\n   'name': 'tags_color_coded',\n   'type': 'select',\n   'settings': {'id': 'dQ7hCb1AUfog',\n    'name': 'tags_color_coded',\n    'type': 'select',\n    'width': 255,\n    'options': [{'name': 'red', 'color': 'hsl(0, 85%, 60%)', 'value': 'red'},\n     {'name': 'green', 'color': 'hsl(30, 85%, 60%)', 'value': 'green'},\n     {'name': 'blue', 'color': 'hsl(45, 85%, 60%)', 'value': 'blue'}],\n    'isVisible': True,\n    'isEditable': True},\n   'created_at': '2025-04-16T19:00:39.936764+00:00',\n   'updated_at': '2025-04-16T19:00:39.936764+00:00',\n   'datatable_id': '271b8bc7-2d04-43b8-8960-ce20365f546b'},\n  {'id': 'eCAiMBRqm0Uc',\n   'name': 'id',\n   'type': 'number',\n   'settings': {'id': 'eCAiMBRqm0Uc',\n    'name': 'id',\n    'type': 'number',\n    'width': 255,\n    'isVisible': True,\n    'isEditable': True},\n   'created_at': '2025-04-16T19:00:39.971857+00:00',\n   'updated_at': '2025-04-16T19:00:39.971857+00:00',\n   'datatable_id': '271b8bc7-2d04-43b8-8960-ce20365f546b'},\n  {'id': 'fRegl7Ucx3Sp',\n   'name': 'description',\n   'type': 'longText',\n   'settings': {'id': 'fRegl7Ucx3Sp',\n    'name': 'description',\n    'type': 'longText',\n    'width': 255,\n    'isVisible': True,\n    'isEditable': True,\n    'max_length': 1000},\n   'created_at': '2025-04-16T19:00:40.055047+00:00',\n   'updated_at': '2025-04-16T19:00:40.055047+00:00',\n   'datatable_id': '271b8bc7-2d04-43b8-8960-ce20365f546b'},\n  {'id': 'foebrzYhiu9x',\n   'name': 'tags',\n   'type': 'select',\n   'settings': {'id': 'foebrzYhiu9x',\n    'name': 'tags',\n    'type': 'select',\n    'width': 255,\n    'options': [{'name': 'tag1', 'color': 'hsl(0, 85%, 60%)', 'value': 'tag1'},\n     {'name': 'tag2', 'color': 'hsl(30, 85%, 60%)', 'value': 'tag2'},\n     {'name': 'tag3', 'color': 'hsl(45, 85%, 60%)', 'value': 'tag3'}],\n    'isVisible': True,\n    'isEditable': True},\n   'created_at': '2025-04-16T19:00:40.084457+00:00',\n   'updated_at': '2025-04-16T19:00:40.084457+00:00',\n   'datatable_id': '271b8bc7-2d04-43b8-8960-ce20365f546b'},\n  {'id': 'ciAzRUhKct9c',\n   'name': 'name',\n   'type': 'longText',\n   'settings': {'id': 'ciAzRUhKct9c',\n    'name': 'name',\n    'type': 'longText',\n    'width': 255,\n    'isVisible': True,\n    'isEditable': True,\n    'max_length': 1000},\n   'created_at': '2025-04-16T19:00:40.232989+00:00',\n   'updated_at': '2025-04-16T19:00:40.232989+00:00',\n   'datatable_id': '271b8bc7-2d04-43b8-8960-ce20365f546b'},\n  {'id': 'iAW5muBh9mc251p8-LqKz',\n   'name': 'url',\n   'type': 'url',\n   'settings': {'id': 'iAW5muBh9mc251p8-LqKz',\n    'name': 'url',\n    'type': 'url',\n    'width': 192,\n    'position': 5,\n    'isVisible': True,\n    'isEditable': True},\n   'created_at': '2025-04-16T20:13:09.418698+00:00',\n   'updated_at': '2025-04-16T20:13:16.914367+00:00',\n   'datatable_id': '271b8bc7-2d04-43b8-8960-ce20365f546b'}],\n 'pagination': {'offset': 0,\n  'limit': 50,\n  'total': 6,\n  'order_by': 'created_at',\n  'sort_dir': 'asc'}}\n\n\n\ncol3 = await client.get_dataset_column(\n    projects[\"items\"][0][\"id\"], datasets[\"id\"], \"new_column_3\"\n)\ncol3\n\n{'id': 'new_column_3',\n 'name': 'New Column 3',\n 'type': 'text',\n 'settings': {'id': 'new_column_3',\n  'name': 'New Column 3',\n  'type': 'text',\n  'max_length': 255,\n  'is_required': True},\n 'created_at': '2025-04-10T02:22:07.300895+00:00',\n 'updated_at': '2025-04-10T02:22:07.300895+00:00',\n 'datatable_id': 'ebc3dd3e-f88b-4f8b-8c72-6cfcae0a0cd4'}\n\n\n\nawait client.update_dataset_column(\n    projects[\"items\"][0][\"id\"],\n    datasets[\"id\"],\n    \"new_column_3\",\n    name=\"New Column 3 Updated\",\n    type=ColumnType.NUMBER.value,\n)\n\n{'id': 'new_column_3',\n 'name': 'New Column 3 Updated',\n 'type': 'number',\n 'settings': {'id': 'new_column_3',\n  'name': 'New Column 3',\n  'type': 'text',\n  'max_length': 255,\n  'is_required': True},\n 'created_at': '2025-04-10T02:22:07.300895+00:00',\n 'updated_at': '2025-04-10T02:22:11.116882+00:00',\n 'datatable_id': 'ebc3dd3e-f88b-4f8b-8c72-6cfcae0a0cd4'}\n\n\n\nawait client.delete_dataset_column(\n    projects[\"items\"][0][\"id\"], datasets[\"id\"], \"new_column_3\"\n)\n\n\n\nRows (for datasets)\n\nsource\n\n\nRagasApiClient.delete_dataset_row\n\n RagasApiClient.delete_dataset_row (project_id:str, dataset_id:str,\n                                    row_id:str)\n\nDelete a row from a dataset.\n\nsource\n\n\nRagasApiClient.update_dataset_row\n\n RagasApiClient.update_dataset_row (project_id:str, dataset_id:str,\n                                    row_id:str, data:Dict)\n\nUpdate an existing row in a dataset.\n\nsource\n\n\nRagasApiClient.create_dataset_row\n\n RagasApiClient.create_dataset_row (project_id:str, dataset_id:str,\n                                    id:str, data:Dict)\n\nCreate a new row in a dataset.\n\nsource\n\n\nRagasApiClient.get_dataset_row\n\n RagasApiClient.get_dataset_row (project_id:str, dataset_id:str,\n                                 row_id:str)\n\nGet a specific row in a dataset.\n\nsource\n\n\nRagasApiClient.list_dataset_rows\n\n RagasApiClient.list_dataset_rows (project_id:str, dataset_id:str,\n                                   limit:int=50, offset:int=0,\n                                   order_by:Optional[str]=None,\n                                   sort_dir:Optional[str]=None)\n\nList rows in a dataset.\n\ndatasets[\"id\"]\n\n'3374b891-8398-41bd-8f81-2867759df294'\n\n\n\nawait client.create_dataset_row(\n    project_id=projects[\"items\"][0][\"id\"],\n    dataset_id=datasets[\"id\"],\n    id=\"\",\n    data={\"new_column_3\": \"name\"},\n)\n\n{'id': '',\n 'data': {'id': '', 'new_column_3': 'name'},\n 'created_at': '2025-04-16T17:46:39.100525+00:00',\n 'updated_at': '2025-04-16T17:46:39.100525+00:00',\n 'datatable_id': '3374b891-8398-41bd-8f81-2867759df294'}\n\n\n\n\nGet a Dataset Visualized - Created From UI\nLets Create a new dataset and add columns and rows via the endpoint to see how it behaves\n\n# generate a dataset\ndataset = await client.create_dataset(\n    project_id=TEST_PROJECT_ID,\n    name=\"Dataset Visualized from UI\",\n    description=\"This is a dataset created from the UI\",\n)\n\n# show url\nWEB_ENDPOINT = \"https://dev.app.ragas.io\"\nurl = f\"{WEB_ENDPOINT}/dashboard/projects/{TEST_PROJECT_ID}/datasets/{dataset['id']}\"\nurl\n\n'https://dev.app.ragas.io/dashboard/projects/e1b3f1e4-d344-48f4-a178-84e7e32e6ab6/datasets/dbccf6aa-b923-47ed-8e97-bd46f2f2cee8'\n\n\n\n# list columns\ncolumns = await client.list_dataset_columns(TEST_PROJECT_ID, dataset[\"id\"])\n# list rows\nrows = await client.list_dataset_rows(TEST_PROJECT_ID, dataset[\"id\"])\n\n\ncolumns\n\n{'items': [],\n 'pagination': {'offset': 0,\n  'limit': 50,\n  'total': 0,\n  'order_by': 'created_at',\n  'sort_dir': 'asc'}}\n\n\n\nrows\n\n{'items': [],\n 'pagination': {'offset': 0,\n  'limit': 50,\n  'total': 0,\n  'order_by': 'created_at',\n  'sort_dir': 'asc'}}\n\n\n\n\nCreate a Dataset from data\nwe want to be able to use the API with python data like this t.List[t.Dict].\n# how we want the data to look\ndata = [\n    {\n        \"id\": \"1\",\n        \"query\": \"What is the capital of France?\",\n        \"persona\": \"John\",\n        \"ground_truth\": \"Paris\",\n    },\n    {\n        \"id\": \"2\",\n        \"query\": \"What is the capital of Germany?\",\n        \"persona\": \"Jane\",\n        \"ground_truth\": \"Berlin\",\n    },\n    {\n        \"id\": \"3\",\n        \"query\": \"What is the capital of Italy?\",\n        \"persona\": \"John\",\n        \"ground_truth\": \"Rome\",\n    },\n]\n\n# print out column types\nprint([col.value for col in ColumnType])\n\n['number', 'text', 'longText', 'select', 'date', 'multiSelect', 'checkbox', 'custom']\n\n\n\n# it should be able to handle simple python dicts\ndata = [\n    {\n        \"id\": \"1\",\n        \"query\": \"What is the capital of France?\",\n        \"persona\": \"John\",\n        \"ground_truth\": \"Paris\",\n    },\n    {\n        \"id\": \"2\",\n        \"query\": \"What is the capital of Germany?\",\n        \"persona\": \"Jane\",\n        \"ground_truth\": \"Berlin\",\n    },\n]\n\nThere can be 2 ways to pass in data\n\nData can come as either as simple dicts\n\ndata = [\n    {\"column_1\": \"value\", \"column_2\": \"value\"}\n]\n\nor if you want to give more settings\n\ndata = [\n    {\n        \"column_1\": {\"data\": \"value\", \"type\": ColumnType.text},\n        \"column_2\": {\"data\": \"value\", \"type\": ColumnType.number},\n    }\n]\n\nafter that you will have to pass a list Column and Row to add it.\n\n\n# test data\ntest_data_columns = [\n    {\"name\": \"id\", \"type\": ColumnType.NUMBER.value},\n    {\"name\": \"query\", \"type\": ColumnType.TEXT.value},\n    {\"name\": \"persona\", \"type\": ColumnType.TEXT.value},\n    {\"name\": \"ground_truth\", \"type\": ColumnType.TEXT.value},\n]\n\ntest_data_rows = [{\n    \"id\": \"1\",\n    \"query\": \"What is the capital of France?\",\n    \"persona\": \"John\",\n    \"ground_truth\": \"Paris\",\n}, {\n    \"id\": \"2\",\n    \"query\": \"What is the capital of Germany?\",\n    \"persona\": \"Jane\",\n    \"ground_truth\": \"Berlin\",\n}, {\n    \"id\": \"3\",\n    \"query\": \"What is the capital of Italy?\",\n    \"persona\": \"John\",\n    \"ground_truth\": \"Rome\",\n}]\n\n\nsource\n\n\ncreate_nano_id\n\n create_nano_id (size=12)\n\n\n# Usage\nnano_id = create_nano_id()  # e.g., \"8dK9cNw3mP5x\"\nnano_id\n\n'Anvz5k9geU7T'\n\n\n\nsource\n\n\ncreate_nano_id\n\n create_nano_id (size=12)\n\n\n# Usage\nnano_id = create_nano_id()  # e.g., \"8dK9cNw3mP5x\"\nnano_id\n\n'Anvz5k9geU7T'\n\n\n\nsource\n\n\nRow\n\n Row (id:str=&lt;factory&gt;, data:List[__main__.RowCell])\n\n*!!! abstract “Usage Documentation” Models\nA base class for creating Pydantic models.\nAttributes: class_vars: The names of the class variables defined on the model. private_attributes: Metadata about the private attributes of the model. signature: The synthesized __init__ [Signature][inspect.Signature] of the model.\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.*\n\nsource\n\n\nRowCell\n\n RowCell (data:Any, column_id:str)\n\n*!!! abstract “Usage Documentation” Models\nA base class for creating Pydantic models.\nAttributes: class_vars: The names of the class variables defined on the model. private_attributes: Metadata about the private attributes of the model. signature: The synthesized __init__ [Signature][inspect.Signature] of the model.\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.*\n\nsource\n\n\nColumn\n\n Column (id:str=&lt;factory&gt;, name:str, type:str, settings:Dict=&lt;factory&gt;,\n         col_order:Optional[int]=None)\n\n*!!! abstract “Usage Documentation” Models\nA base class for creating Pydantic models.\nAttributes: class_vars: The names of the class variables defined on the model. private_attributes: Metadata about the private attributes of the model. signature: The synthesized __init__ [Signature][inspect.Signature] of the model.\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.*\n\nsource\n\n\nRagasApiClient.create_dataset_with_data\n\n RagasApiClient.create_dataset_with_data (project_id:str, name:str,\n                                          description:str,\n                                          columns:List[__main__.Column],\n                                          rows:List[__main__.Row],\n                                          batch_size:int=50)\n\n*Create a dataset with columns and rows.\nThis method creates a dataset and populates it with columns and rows in an optimized way using concurrent requests.\nArgs: project_id: Project ID name: Dataset name description: Dataset description columns: List of column definitions rows: List of row data batch_size: Number of operations to perform concurrently\nReturns: The created dataset*\nNow lets test this.\n\n# Create Column objects\ncolumn_objects = []\nfor col in test_data_columns:\n    column_objects.append(Column(\n        name=col[\"name\"],\n        type=col[\"type\"]\n        # id and settings will be auto-generated\n    ))\n\n# Create a mapping of column names to their IDs for creating rows\ncolumn_map = {col.name: col.id for col in column_objects}\n\n# Create Row objects\nrow_objects = []\nfor row in test_data_rows:\n    cells = []\n    for key, value in row.items():\n        if key in column_map:  # Skip any extra fields not in columns\n            cells.append(RowCell(\n                data=value,\n                column_id=column_map[key]\n            ))\n    row_objects.append(Row(data=cells))\n\n# Now we can create the dataset\ndataset = await client.create_dataset_with_data(\n    project_id=TEST_PROJECT_ID,\n    name=\"Capitals Dataset\",\n    description=\"A dataset about capital cities\",\n    columns=column_objects,\n    rows=row_objects\n)\n\nprint(f\"Created dataset with ID: {dataset['id']}\")\n\n# Verify the data\ncolumns = await client.list_dataset_columns(TEST_PROJECT_ID, dataset[\"id\"])\nprint(f\"Created {len(columns['items'])} columns\")\n\nrows = await client.list_dataset_rows(TEST_PROJECT_ID, dataset[\"id\"])\nprint(f\"Created {len(rows['items'])} rows\")\n\nCreated dataset with ID: 5e7912f4-6a65-4d0c-bf79-0fab9ddda40c\nCreated 4 columns\nCreated 3 rows\n\n\n\n# get dataset url\nurl = f\"{WEB_ENDPOINT}/dashboard/projects/{TEST_PROJECT_ID}/datasets/{dataset['id']}\"\nurl\n\n'https://dev.app.ragas.io/dashboard/projects/e1b3f1e4-d344-48f4-a178-84e7e32e6ab6/datasets/5e7912f4-6a65-4d0c-bf79-0fab9ddda40c'\n\n\n\n# cleanup\nawait client.delete_dataset(TEST_PROJECT_ID, dataset[\"id\"])\n\n\n\nThe same but for Experiments\n\nsource\n\n\nRagasApiClient.delete_experiment_row\n\n RagasApiClient.delete_experiment_row (project_id:str, experiment_id:str,\n                                       row_id:str)\n\nDelete a row from an experiment.\n\nsource\n\n\nRagasApiClient.update_experiment_row\n\n RagasApiClient.update_experiment_row (project_id:str, experiment_id:str,\n                                       row_id:str, data:Dict)\n\nUpdate an existing row in an experiment.\n\nsource\n\n\nRagasApiClient.create_experiment_row\n\n RagasApiClient.create_experiment_row (project_id:str, experiment_id:str,\n                                       id:str, data:Dict)\n\nCreate a new row in an experiment.\n\nsource\n\n\nRagasApiClient.get_experiment_row\n\n RagasApiClient.get_experiment_row (project_id:str, experiment_id:str,\n                                    row_id:str)\n\nGet a specific row in an experiment.\n\nsource\n\n\nRagasApiClient.list_experiment_rows\n\n RagasApiClient.list_experiment_rows (project_id:str, experiment_id:str,\n                                      limit:int=50, offset:int=0,\n                                      order_by:Optional[str]=None,\n                                      sort_dir:Optional[str]=None)\n\nList rows in an experiment.\n\nsource\n\n\nRagasApiClient.delete_experiment_column\n\n RagasApiClient.delete_experiment_column (project_id:str,\n                                          experiment_id:str,\n                                          column_id:str)\n\nDelete a column from an experiment.\n\nsource\n\n\nRagasApiClient.update_experiment_column\n\n RagasApiClient.update_experiment_column (project_id:str,\n                                          experiment_id:str,\n                                          column_id:str, **column_data)\n\nUpdate an existing column in an experiment.\n\nsource\n\n\nRagasApiClient.create_experiment_column\n\n RagasApiClient.create_experiment_column (project_id:str,\n                                          experiment_id:str, id:str,\n                                          name:str, type:str,\n                                          col_order:Optional[int]=None,\n                                          settings:Optional[Dict]=None)\n\nCreate a new column in an experiment.\n\nsource\n\n\nRagasApiClient.get_experiment_column\n\n RagasApiClient.get_experiment_column (project_id:str, experiment_id:str,\n                                       column_id:str)\n\nGet a specific column in an experiment.\n\nsource\n\n\nRagasApiClient.list_experiment_columns\n\n RagasApiClient.list_experiment_columns (project_id:str,\n                                         experiment_id:str, limit:int=50,\n                                         offset:int=0,\n                                         order_by:Optional[str]=None,\n                                         sort_dir:Optional[str]=None)\n\nList columns in an experiment.\n\nawait client.create_experiment(TEST_PROJECT_ID, \"New Experiment\", \"This is a new experiment\")\n\n{'id': '7c695b58-7fc3-464c-a18b-a96e35f9684d',\n 'name': 'New Experiment',\n 'description': 'This is a new experiment',\n 'updated_at': '2025-04-09T17:03:44.340782+00:00',\n 'created_at': '2025-04-09T17:03:44.340782+00:00',\n 'version_counter': 0,\n 'project_id': 'e1b3f1e4-d344-48f4-a178-84e7e32e6ab6'}\n\n\n\nexperiments = await client.list_experiments(TEST_PROJECT_ID)\nEXPERIMENT_ID = experiments[\"items\"][0][\"id\"]\nEXPERIMENT_ID\n\n'78fd6c58-7edf-4239-93d1-4f49185d8e49'\n\n\n\nsource\n\n\nRagasApiClient.create_experiment_with_data\n\n RagasApiClient.create_experiment_with_data (project_id:str, name:str,\n                                             description:str, columns:List\n                                             [__main__.Column],\n                                             rows:List[__main__.Row],\n                                             batch_size:int=50)\n\n*Create an experiment with columns and rows.\nThis method creates an experiment and populates it with columns and rows in an optimized way using concurrent requests.\nArgs: project_id: Project ID name: Experiment name description: Experiment description columns: List of column definitions rows: List of row data batch_size: Number of operations to perform concurrently\nReturns: The created experiment*\n\nsource\n\n\nRagasApiClient.convert_raw_data\n\n RagasApiClient.convert_raw_data (column_defs:List[Dict],\n                                  row_data:List[Dict])\n\n*Convert raw data to column and row objects.\nArgs: column_defs: List of column definitions (dicts with name, type) row_data: List of dictionaries with row data\nReturns: Tuple of (columns, rows)*\n\nsource\n\n\nRagasApiClient.create_column_map\n\n RagasApiClient.create_column_map (columns:List[__main__.Column])\n\n*Create a mapping of column names to IDs.\nArgs: columns: List of column objects\nReturns: Dictionary mapping column names to IDs*\n\nsource\n\n\nRagasApiClient.create_row\n\n RagasApiClient.create_row (data:Dict[str,Any], column_map:Dict[str,str],\n                            id:Optional[str]=None)\n\n*Create a Row object from a dictionary.\nArgs: data: Dictionary mapping column names to values column_map: Dictionary mapping column names to column IDs id: Custom ID (generates one if not provided)\nReturns: Row object*\n\nsource\n\n\nRagasApiClient.create_column\n\n RagasApiClient.create_column (name:str, type:str,\n                               settings:Optional[Dict]=None,\n                               col_order:Optional[int]=None,\n                               id:Optional[str]=None)\n\n*Create a Column object.\nArgs: name: Column name type: Column type (use ColumnType enum) settings: Column settings col_order: Column order id: Custom ID (generates one if not provided)\nReturns: Column object*",
    "crumbs": [
      "Backends",
      "Ragas API Client"
    ]
  },
  {
    "objectID": "prompt/base.html",
    "href": "prompt/base.html",
    "title": "ragas_experimental",
    "section": "",
    "text": "/opt/hostedtoolcache/Python/3.10.17/x64/lib/python3.10/site-packages/fastcore/docscrape.py:230: UserWarning: Unknown section Parameters:\n  else: warn(msg)\n\nsource\n\n\n\n Prompt (instruction:str, examples:Optional[List[Tuple[Dict,Dict]]]=None)\n\nCreate a simple prompt object.\n\n\n\n\n# Create a basic prompt\nprompt = Prompt(\n    instruction=\"Evaluate if given answer {response} is same as expected answer {expected_answer}\"\n)\n\n# Add examples with dict inputs and dict outputs\nprompt.add_example(\n    {\n        \"response\": \"You can get a full refund if you miss your flight.\",\n        \"expected_answer\": \"Refunds depend on ticket type; only refundable tickets qualify for full refunds.\"\n    },\n    {\"score\": \"fail\"}\n)\n\nprompt.add_example(\n    {\n        \"response\": \"Each passenger gets 1 free checked bag up to 23kg.\",\n        \"expected_answer\": \"Each passenger gets 1 free checked bag up to 23kg.\"\n    },\n    {\"score\": \"pass\"}\n)\n\nprint(prompt.format(response=\"You can get a full refund if you miss your flight.\", expected_answer=\"Refunds depend on ticket type; only refundable tickets qualify for full refunds.\"))\n\nEvaluate if given answer You can get a full refund if you miss your flight. is same as expected answer Refunds depend on ticket type; only refundable tickets qualify for full refunds.\n\nExamples:\n\nExample 1:\nInput:\nresponse: You can get a full refund if you miss your flight.\nexpected_answer: Refunds depend on ticket type; only refundable tickets qualify for full refunds.\nOutput:\nscore: fail\n\nExample 2:\nInput:\nresponse: Each passenger gets 1 free checked bag up to 23kg.\nexpected_answer: Each passenger gets 1 free checked bag up to 23kg.\nOutput:\nscore: pass\n\n\n\nprint(str(prompt))\n\nPrompt(instruction='Evaluate if given answer {response} is same as expected answer {expected_answer}',\n examples=Examples:\n\nExample 1:\nInput:\nresponse: You can get a full refund if you miss your flight.\nexpected_answer: Refunds depend on ticket type; only refundable tickets qualify for full refunds.\nOutput:\nscore: fail\n\nExample 2:\nInput:\nresponse: Each passenger gets 1 free checked bag up to 23kg.\nexpected_answer: Each passenger gets 1 free checked bag up to 23kg.\nOutput:\nscore: pass)",
    "crumbs": [
      "Prompt",
      "Base Class"
    ]
  },
  {
    "objectID": "prompt/base.html#base-class",
    "href": "prompt/base.html#base-class",
    "title": "ragas_experimental",
    "section": "",
    "text": "/opt/hostedtoolcache/Python/3.10.17/x64/lib/python3.10/site-packages/fastcore/docscrape.py:230: UserWarning: Unknown section Parameters:\n  else: warn(msg)\n\nsource\n\n\n\n Prompt (instruction:str, examples:Optional[List[Tuple[Dict,Dict]]]=None)\n\nCreate a simple prompt object.\n\n\n\n\n# Create a basic prompt\nprompt = Prompt(\n    instruction=\"Evaluate if given answer {response} is same as expected answer {expected_answer}\"\n)\n\n# Add examples with dict inputs and dict outputs\nprompt.add_example(\n    {\n        \"response\": \"You can get a full refund if you miss your flight.\",\n        \"expected_answer\": \"Refunds depend on ticket type; only refundable tickets qualify for full refunds.\"\n    },\n    {\"score\": \"fail\"}\n)\n\nprompt.add_example(\n    {\n        \"response\": \"Each passenger gets 1 free checked bag up to 23kg.\",\n        \"expected_answer\": \"Each passenger gets 1 free checked bag up to 23kg.\"\n    },\n    {\"score\": \"pass\"}\n)\n\nprint(prompt.format(response=\"You can get a full refund if you miss your flight.\", expected_answer=\"Refunds depend on ticket type; only refundable tickets qualify for full refunds.\"))\n\nEvaluate if given answer You can get a full refund if you miss your flight. is same as expected answer Refunds depend on ticket type; only refundable tickets qualify for full refunds.\n\nExamples:\n\nExample 1:\nInput:\nresponse: You can get a full refund if you miss your flight.\nexpected_answer: Refunds depend on ticket type; only refundable tickets qualify for full refunds.\nOutput:\nscore: fail\n\nExample 2:\nInput:\nresponse: Each passenger gets 1 free checked bag up to 23kg.\nexpected_answer: Each passenger gets 1 free checked bag up to 23kg.\nOutput:\nscore: pass\n\n\n\nprint(str(prompt))\n\nPrompt(instruction='Evaluate if given answer {response} is same as expected answer {expected_answer}',\n examples=Examples:\n\nExample 1:\nInput:\nresponse: You can get a full refund if you miss your flight.\nexpected_answer: Refunds depend on ticket type; only refundable tickets qualify for full refunds.\nOutput:\nscore: fail\n\nExample 2:\nInput:\nresponse: Each passenger gets 1 free checked bag up to 23kg.\nexpected_answer: Each passenger gets 1 free checked bag up to 23kg.\nOutput:\nscore: pass)",
    "crumbs": [
      "Prompt",
      "Base Class"
    ]
  },
  {
    "objectID": "llm/llm.html",
    "href": "llm/llm.html",
    "title": "LLMs",
    "section": "",
    "text": "source\n\nragas_llm\n\n ragas_llm (provider:str, model:str, client:Any, **model_args)\n\n\nsource\n\n\nRagasLLM\n\n RagasLLM (provider:str, model:str, client:Any, **model_args)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nExample Usage\n\nfrom openai import OpenAI\nclass Response(BaseModel):\n    response: str\n\nllm = ragas_llm(provider=\"openai\",model=\"gpt-4o\",client=OpenAI())\nllm.generate(\"What is the capital of India?\",response_model=Response) #works fine\n\ntry:\n    await llm.agenerate(\"What is the capital of India?\", response_model=Response)\nexcept TypeError as e:\n    assert isinstance(e, TypeError)\n#gives TypeError: object Response can't be used in 'await' expression\n\n\nfrom openai import AsyncOpenAI\n\nllm = ragas_llm(provider=\"openai\",model=\"gpt-4o\",client=AsyncOpenAI())\nawait llm.agenerate(\"What is the capital of India?\",response_model=Response)\n\nResponse(response='The capital of India is New Delhi.')\n\n\n\nfrom anthropic import Anthropic\n\nllm = ragas_llm(provider=\"anthropic\",model=\"claude-3-opus-20240229\",client=Anthropic(),max_tokens=1024)\nllm.generate(\"What is the capital of India?\",response_model=Response)\n\nResponse(response='The capital of India is New Delhi.')",
    "crumbs": [
      "LLMs"
    ]
  },
  {
    "objectID": "tracing/langfuse.html",
    "href": "tracing/langfuse.html",
    "title": "Langfuse Tracing",
    "section": "",
    "text": "source\n\nLangfuseTrace\n\n LangfuseTrace (trace:langfuse.api.resources.commons.types.trace_with_full\n                _details.TraceWithFullDetails)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nsync_trace\n\n sync_trace (trace_id:Optional[str]=None, max_retries:int=10,\n             delay:float=2)\n\n*Wait for a Langfuse trace to be synced to the server.\nArgs: trace_id: The ID of the trace to wait for max_retries: Maximum number of retry attempts (default: 10) delay: Delay between retries in seconds (default: 0.5)\nReturns: Trace object if found, None if not found after retries*\n\nsource\n\n\nadd_query_param\n\n add_query_param (url, param_name, param_value)\n\nAdd a query parameter to a URL.\n\n# Example usage\nurl = \"https://example.com/path?existing=value\"\nnew_url = add_query_param(url, \"new_param\", \"new_value\")\nprint(new_url)\n\nhttps://example.com/path?existing=value&new_param=new_value",
    "crumbs": [
      "Tracing",
      "Langfuse Tracing"
    ]
  },
  {
    "objectID": "metric/discrete.html",
    "href": "metric/discrete.html",
    "title": "DiscreteMetric",
    "section": "",
    "text": "source",
    "crumbs": [
      "Metric",
      "DiscreteMetric"
    ]
  },
  {
    "objectID": "metric/discrete.html#example-usage",
    "href": "metric/discrete.html#example-usage",
    "title": "DiscreteMetric",
    "section": "Example usage",
    "text": "Example usage\n\nfrom ragas_experimental.llm import ragas_llm\nfrom openai import OpenAI\n\nllm = ragas_llm(provider=\"openai\",model=\"gpt-4o\",client=OpenAI())\n\n\nmy_metric = DiscreteMetric(\n    llm=llm,\n    name='helpfulness',\n    prompt=\"Evaluate if given answer is helpful\\n\\n{response}\",\n    values=[\"low\",\"med\",\"high\"],\n)\n\nresult = my_metric.score(response=\"this is my response\")\nprint(result) #gives \"low\"\nprint(result.reason) #gives reasoning from llm\n\nlow\nThe response is incomplete and lacks any specific information. It cannot be evaluated for helpfulness without further context or content.\n\n\n\nWrite custom discrete metric\n\nfrom ragas_experimental.metric.result import MetricResult\n\n@discrete_metric(\n    llm=llm,\n    prompt=\"Evaluate if given answer is helpful\\n\\n{response}\",\n    name='new_metric',\n    values=[\"low\",\"med\",\"high\"]\n)\ndef my_metric(llm,prompt,**kwargs):\n\n        class response_model(BaseModel):\n             output: t.List[bool]\n             reason: str\n        traces = {}\n        traces['input'] = kwargs\n        response = llm.generate(prompt.format(**kwargs),response_model=response_model)\n        traces['output'] = response.model_dump()\n        total = sum(response.output)\n        if total &lt; 1:\n            score = 'low'\n        else:\n            score = 'high'\n            \n        return MetricResult(result=score,reason=response.reason,traces=traces)\n\nresult = my_metric.score(response='my response') # result\nprint(result)\nprint(result.reason)\n\nlow\nThe prompt 'my response' does not provide sufficient information or context for me to evaluate its helpfulness. An answer needs to be specific and provide insight or information relative to a clear question or context.",
    "crumbs": [
      "Metric",
      "DiscreteMetric"
    ]
  },
  {
    "objectID": "metric/result.html",
    "href": "metric/result.html",
    "title": "MetricResult",
    "section": "",
    "text": "source\n\nMetricResult\n\n MetricResult (result:Any, reason:Optional[str]=None,\n               traces:Optional[Dict[str,Any]]=None)\n\n*Class to hold the result of a metric evaluation.\nThis class behaves like its underlying result value but still provides access to additional metadata like reasoning.\nWorks with: - DiscreteMetrics (string results) - NumericMetrics (float/int results) - RankingMetrics (list results)*\n\n\nExample Usage\n\nmetric_result = MetricResult(result=42, reason=\"This is a test\")\nprint(metric_result)\nprint(metric_result.reason)\n\n### Example with Numeric Operations\nnum_result1 = MetricResult(result=5.0)\nnum_result2 = MetricResult(result=3.0)\nprint(num_result1 + num_result2)  # 8.0\n\n\n### Example with String Operations\nstr_result = MetricResult(result=\"low\")\nprint(str_result.upper())  # \"LOW\"\n\n## Example with List Operations\nlist_result = MetricResult(result=[1, 2, 3])\nprint(list_result[1:])  # 2\n\n42\nThis is a test\n8.0\nLOW\n[2, 3]\n\n\nnow lets make it Pydantic compatible also\n\nsource\n\n\nMetricResult.__get_pydantic_core_schema__\n\n MetricResult.__get_pydantic_core_schema__ (_source_type:Any,\n                                            _handler:pydantic.annotated_ha\n                                            ndlers.GetCoreSchemaHandler)\n\n*Generate a Pydantic core schema for MetricResult.\nThis custom schema handles different serialization behaviors: - For model_dump(): Returns the original MetricResult instance - For model_dump_json(): Converts to a JSON-compatible dict using json*\n\nsource\n\n\nMetricResult.__json__\n\n MetricResult.__json__ ()\n\n*Return data for JSON serialization.\nThis method is used by json.dumps and other JSON serializers to convert MetricResult to a JSON-compatible format.*\n\nsource\n\n\nMetricResult.validate\n\n MetricResult.validate (value:Any,\n                        info:pydantic_core.core_schema.ValidationInfo)\n\nProvide compatibility with older Pydantic versions.\n\nfrom pydantic import BaseModel\n\nclass TestModel(BaseModel):\n    response: str\n    grade: MetricResult\n    faithfulness: MetricResult\n\n\nm = TestModel(response=\"test\", grade=MetricResult(result=1, reason=\"test\"), faithfulness=MetricResult(result=1, reason=\"test\"))\nm\n\nTestModel(response='test', grade=1, faithfulness=1)\n\n\n\nm.model_dump()\n\n{'response': 'test', 'grade': 1, 'faithfulness': 1}\n\n\n\nm.model_dump_json()\n\n'{\"response\":\"test\",\"grade\":{\"result\":1,\"reason\":\"test\"},\"faithfulness\":{\"result\":1,\"reason\":\"test\"}}'",
    "crumbs": [
      "Metric",
      "MetricResult"
    ]
  },
  {
    "objectID": "metric/decorator.html",
    "href": "metric/decorator.html",
    "title": "Decorator Factory",
    "section": "",
    "text": "source\n\ncreate_metric_decorator\n\n create_metric_decorator (metric_class)\n\n*Factory function that creates decorator factories for different metric types.\nArgs: metric_class: The metric class to use (DiscreteMetrics, NumericMetrics, etc.)\nReturns: A decorator factory function for the specified metric type*\n\n\nExample usage\n\nfrom ragas_experimental.metric import DiscreteMetric, MetricResult\nfrom pydantic import BaseModel\n\nfrom ragas_experimental.llm import ragas_llm\nfrom openai import OpenAI\n\nllm = ragas_llm(provider=\"openai\",model=\"gpt-4o\",client=OpenAI())\n\ndiscrete_metric = create_metric_decorator(DiscreteMetric)\n\n@discrete_metric(llm=llm,\n    prompt=\"Evaluate if given answer is helpful\\n\\n{response}\",\n    name='new_metric',values=[\"low\",\"med\",\"high\"])\ndef my_metric(llm,prompt,**kwargs):\n\n        class response_model(BaseModel):\n             output: t.List[bool]\n             reason: str\n        \n        response = llm.generate(prompt.format(**kwargs),response_model=response_model)\n        total = sum(response.output)\n        if total &lt; 1:\n            score = 'low'\n        else:\n            score = 'high'\n        return MetricResult(result=score, reason=response.reason)\n\nresult = my_metric.score(response='my response') # result\nprint(result)\nprint(result.reason)\n\nlow\nThe context or details of the user's response ('my response') are not provided, making it impossible to evaluate its helpfulness accurately.",
    "crumbs": [
      "Metric",
      "Decorator Factory"
    ]
  },
  {
    "objectID": "typing.html",
    "href": "typing.html",
    "title": "Typing Module",
    "section": "",
    "text": "Here we have the supported types and meta-types.\nThe API supports the following column types:\n\nnumber: Numeric values\nlongText: Text content\nselect: Single selection from predefined options\ndate: Date values\nmultiSelect: Multiple selections from predefined options\ncheckbox: Boolean values\nurl: url fields\ncustom: Custom column types with specific behavior\n\nEach column type has specific settings that can be configured through the settings object.\n\nsource\n\n\n\n ColumnType (value, names=None, module=None, qualname=None, type=None,\n             start=1)\n\nColumn types supported by the Ragas API.\n\nsource\n\n\n\n\n FieldMeta (type, required=True, id:Optional[str]=None,\n            settings:Optional[dict]=None)\n\nBase metadata for field type annotations.\n\nsource\n\n\n\n\n Number (min_value:Optional[float]=None, max_value:Optional[float]=None,\n         required:bool=True, id:Optional[str]=None)\n\nNumber field metadata.\n\nsource\n\n\n\n\n Text (max_length:int=1000, required:bool=True, id:Optional[str]=None)\n\nText field metadata.\n\nsource\n\n\n\n\n Url (required:bool=True, id:Optional[str]=None)\n\nUrl field metadata.\n\nsource\n\n\n\n\n get_colors_for_options (options, color_names=None)\n\n*Assign colors to options from the COLOR_MAP.\nArgs: options: List of option names color_names: Optional list of specific color names to use from COLOR_MAP If None, colors will be assigned in order from COLOR_MAP\nReturns: List of option objects with name, value, and color properties*\n\nsource\n\n\n\n\n Select (options:Optional[List[str]]=None, required:bool=True,\n         colors:Optional[List[str]]=None)\n\nSelect field metadata.\n\nsource\n\n\n\n\n MultiSelect (options:Optional[List[str]]=None, required:bool=True)\n\nMultiSelect field metadata.\n\nsource\n\n\n\n\n Checkbox (required:bool=True)\n\nCheckbox field metadata.\n\nsource\n\n\n\n\n Date (include_time:bool=False, required:bool=True)\n\nDate field metadata.\n\nsource\n\n\n\n\n Custom (custom_type:str='', required:bool=True)\n\nCustom field metadata.",
    "crumbs": [
      "Typing Module"
    ]
  },
  {
    "objectID": "typing.html#supported-types",
    "href": "typing.html#supported-types",
    "title": "Typing Module",
    "section": "",
    "text": "Here we have the supported types and meta-types.\nThe API supports the following column types:\n\nnumber: Numeric values\nlongText: Text content\nselect: Single selection from predefined options\ndate: Date values\nmultiSelect: Multiple selections from predefined options\ncheckbox: Boolean values\nurl: url fields\ncustom: Custom column types with specific behavior\n\nEach column type has specific settings that can be configured through the settings object.\n\nsource\n\n\n\n ColumnType (value, names=None, module=None, qualname=None, type=None,\n             start=1)\n\nColumn types supported by the Ragas API.\n\nsource\n\n\n\n\n FieldMeta (type, required=True, id:Optional[str]=None,\n            settings:Optional[dict]=None)\n\nBase metadata for field type annotations.\n\nsource\n\n\n\n\n Number (min_value:Optional[float]=None, max_value:Optional[float]=None,\n         required:bool=True, id:Optional[str]=None)\n\nNumber field metadata.\n\nsource\n\n\n\n\n Text (max_length:int=1000, required:bool=True, id:Optional[str]=None)\n\nText field metadata.\n\nsource\n\n\n\n\n Url (required:bool=True, id:Optional[str]=None)\n\nUrl field metadata.\n\nsource\n\n\n\n\n get_colors_for_options (options, color_names=None)\n\n*Assign colors to options from the COLOR_MAP.\nArgs: options: List of option names color_names: Optional list of specific color names to use from COLOR_MAP If None, colors will be assigned in order from COLOR_MAP\nReturns: List of option objects with name, value, and color properties*\n\nsource\n\n\n\n\n Select (options:Optional[List[str]]=None, required:bool=True,\n         colors:Optional[List[str]]=None)\n\nSelect field metadata.\n\nsource\n\n\n\n\n MultiSelect (options:Optional[List[str]]=None, required:bool=True)\n\nMultiSelect field metadata.\n\nsource\n\n\n\n\n Checkbox (required:bool=True)\n\nCheckbox field metadata.\n\nsource\n\n\n\n\n Date (include_time:bool=False, required:bool=True)\n\nDate field metadata.\n\nsource\n\n\n\n\n Custom (custom_type:str='', required:bool=True)\n\nCustom field metadata.",
    "crumbs": [
      "Typing Module"
    ]
  },
  {
    "objectID": "typing.html#modelconverter",
    "href": "typing.html#modelconverter",
    "title": "Typing Module",
    "section": "ModelConverter",
    "text": "ModelConverter\n\nsource\n\nModelConverter\n\n ModelConverter ()\n\nConvert Pydantic models to Ragas API columns and rows.\n\nsource\n\n\ninfer_metric_result_type\n\n infer_metric_result_type (field_value)\n\nInfer field type from a MetricResult instance.\n\nsource\n\n\ninfer_field_type\n\n infer_field_type (annotation, field_info)\n\nInfer field type from Python type annotation.\n\nsource\n\n\nModelConverter.model_to_columns\n\n ModelConverter.model_to_columns (model_class)\n\nConvert a Pydantic model class to Ragas API column definitions.\n\nclass TestModel(BaseModel):\n    tags: t.Literal[\"test\", \"test2\"]\n    tags_with_colors: t.Annotated[t.Literal[\"test\", \"test2\"], Select(colors=[\"red\", \"blue\"])]\n    url: t.Annotated[str, Url()]\n    score: MetricResult\n\n\nModelConverter.model_to_columns(TestModel)\n\n[{'id': 'tags',\n  'name': 'tags',\n  'type': 'select',\n  'settings': {'width': 255,\n   'isVisible': True,\n   'isEditable': True,\n   'options': [{'name': 'test', 'value': 'test', 'color': 'hsl(0, 85%, 60%)'},\n    {'name': 'test2', 'value': 'test2', 'color': 'hsl(30, 85%, 60%)'}],\n   'position': 0}},\n {'id': 'tags_with_colors',\n  'name': 'tags_with_colors',\n  'type': 'select',\n  'settings': {'width': 255,\n   'isVisible': True,\n   'isEditable': True,\n   'options': [{'name': 'test', 'value': 'test', 'color': 'hsl(0, 85%, 60%)'},\n    {'name': 'test2', 'value': 'test2', 'color': 'hsl(210, 85%, 60%)'}],\n   'position': 1}},\n {'id': 'url',\n  'name': 'url',\n  'type': 'url',\n  'settings': {'width': 255,\n   'isVisible': True,\n   'isEditable': True,\n   'position': 2}},\n {'id': 'score',\n  'name': 'score',\n  'type': 'longText',\n  'settings': {'width': 255,\n   'isVisible': True,\n   'isEditable': True,\n   'max_length': 1000,\n   'position': 3}},\n {'id': 'score_reason',\n  'name': 'score_reason',\n  'type': 'longText',\n  'settings': {'width': 255,\n   'isVisible': True,\n   'isEditable': True,\n   'max_length': 1000,\n   'position': 4},\n  'editable': True}]\n\n\n\nsource\n\n\nModelConverter.instance_to_row\n\n ModelConverter.instance_to_row (instance, model_class=None)\n\nConvert a Pydantic model instance to a Ragas API row.\n\nsource\n\n\nModelConverter.instances_to_rows\n\n ModelConverter.instances_to_rows (instances, model_class=None)\n\nConvert multiple Pydantic model instances to Ragas API rows.",
    "crumbs": [
      "Typing Module"
    ]
  },
  {
    "objectID": "project/core.html",
    "href": "project/core.html",
    "title": "Project",
    "section": "",
    "text": "from ragas_experimental.model.notion_model import NotionModel\nsource",
    "crumbs": [
      "Project",
      "Project"
    ]
  },
  {
    "objectID": "project/core.html#manage-datasets",
    "href": "project/core.html#manage-datasets",
    "title": "Project",
    "section": "Manage datasets",
    "text": "Manage datasets\n\nsource\n\ncreate_dataset_columns\n\n create_dataset_columns (project_id, dataset_id, columns,\n                         create_dataset_column_func)\n\n\nsource\n\n\nProject.create_dataset\n\n Project.create_dataset (model:Type[pydantic.main.BaseModel],\n                         name:Optional[str]=None)\n\n*Create a new dataset database.\nArgs: name (str): Name of the dataset model (NotionModel): Model class defining the database structure\nReturns: Dataset: A new dataset object for managing entries*\n\nimport ragas_experimental.typing as rt\n\n\n# create an example dataset\nclass TestModel(BaseModel):\n    id: int\n    name: str\n    description: str\n    tags: t.Literal[\"tag1\", \"tag2\", \"tag3\"]\n    tags_color_coded: t.Annotated[t.Literal[\"red\", \"green\", \"blue\"], rt.Select(colors=[\"red\", \"green\", \"blue\"])]\n    url: t.Annotated[str, rt.Url()] = \"https://www.google.com\"\n\n\ntest_dataset = project.create_dataset(TestModel)\ntest_dataset\n\nDataset(name=TestModel, model=TestModel, len=0)\n\n\n\nsource\n\n\nProject.get_dataset_by_id\n\n Project.get_dataset_by_id (dataset_id:str, model)\n\nGet an existing dataset by name.\n\nproject.get_dataset_by_id(test_dataset.dataset_id, TestModel)\n\nDataset(name=TestModel, model=TestModel, len=0)\n\n\n\nsource\n\n\nProject.get_dataset\n\n Project.get_dataset (dataset_name:str, model)\n\nGet an existing dataset by name.\n\nproject.get_dataset(\"TestModel\", TestModel)\n\nDataset(name=TestModel, model=TestModel, len=0)",
    "crumbs": [
      "Project",
      "Project"
    ]
  },
  {
    "objectID": "project/naming.html",
    "href": "project/naming.html",
    "title": "Memorable Namer",
    "section": "",
    "text": "source\n\nMemorableNames\n\n MemorableNames ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\nmn = MemorableNames()\nmn.generate_unique_names(10)\n\n['hardcore_liskov',\n 'cranky_ritchie',\n 'cool_zuckerberg',\n 'competent_berners_lee',\n 'serene_huffman',\n 'awesome_engelbart',\n 'reverent_valiant',\n 'romantic_stallman',\n 'zen_carmack',\n 'musing_page']\n\n\n\n# now many combinations are there?\nlen(mn.scientists) * len(mn.adjectives)\n\n6762",
    "crumbs": [
      "Project",
      "Memorable Namer"
    ]
  },
  {
    "objectID": "experiment.html",
    "href": "experiment.html",
    "title": "Experiment",
    "section": "",
    "text": "source\n\nExperiment\n\n Experiment (name:str, model:Type[ragas_experimental.model.pydantic_model.\n             ExtendedPydanticBaseModel], project_id:str,\n             experiment_id:str, ragas_api_client:ragas_experimental.backen\n             ds.ragas_api_client.RagasApiClient)\n\n*A list-like interface for managing dataset entries with backend synchronization.\nThis class behaves like a Python list while synchronizing operations with the Ragas backend API.*",
    "crumbs": [
      "Experiment"
    ]
  },
  {
    "objectID": "init_module.html",
    "href": "init_module.html",
    "title": "ragas_experimental",
    "section": "",
    "text": "This exports to __init__ for RagasAnnotator root so that we have more control over how we expose module for the users."
  }
]